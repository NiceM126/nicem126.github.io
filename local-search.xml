<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux磁盘及分区</title>
    <link href="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/"/>
    <url>/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<p>Linux 系统中所有的硬件设备都是通过文件的方式来表现和使用的，我们将这些文件称为设备文件，硬盘对应的设备文件一般被称为块设备文件。本文介绍磁盘设备在 Linux 系统中的表示方法以及如何创建磁盘分区。说明：本文的演示环境为 ubuntu 16.04。</p><h1 id="磁盘分类"><a href="#磁盘分类" class="headerlink" title="磁盘分类"></a>磁盘分类</h1><p>比较常见的磁盘类型有消费类市场中的 SATA 硬盘和服务器中使用的 SCSI 硬盘、SAS 硬盘，当然还有当下大热的各种固态硬盘。</p><p><strong>SATA 硬盘</strong><br>SATA(Serial ATA)口的硬盘又叫串口硬盘，Serial ATA 采用串行连接方式，串行 ATA 总线使用嵌入式时钟信号，具备了更强的纠错能力，与以往相比其最大的区别在于能对传输指令(不仅仅是数据)进行检查，如果发现错误会自动矫正，这在很大程度上提高了数据传输的可靠性。串行接口还具有结构简单、支持热插拔的优点。SATA 硬盘主要用于消费类市场和一些低端服务器(下图来自互联网)：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/1.jpg" class="" title="Linux磁盘及分区"><p><strong>SCSI 硬盘</strong><br>SCSI 硬盘即采用 SCSI 接口的硬盘。它由于性能好、稳定性高，因此在服务器上得到广泛应用。同时其价格也不菲，正因它的价格昂贵，所以在普通PC上很少见到它的踪迹。SCSI 硬盘使用 50 针接口，外观和普通硬盘接口有些相似(下图来自互联网)：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/2.jpg" class="" title="Linux磁盘及分区"><p><strong>SAS 硬盘</strong></p><p>SAS 是 Serial Attached SCSI 的缩写，即串行连接的 SCSI，其目标是定义一个新的串行点对点的企业级存储设备接口。串行接口减少了线缆的尺寸，允许更快的传输速度。SAS 硬盘与相同转速的 SCSI 硬盘相比有相同或者更好的性能。SAS 硬盘一般用于比较高端的服务器。</p><p><strong>固态硬盘</strong><br>固态硬盘(Solid State Disk)，一般称之为 SSD 硬盘，固态硬盘是用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元(FLASH芯片、DRAM芯片)组成。其主要特点是没有传统硬盘的机械结构，读写速度非常快(下图来自互联网)：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/3.png" class="" title="Linux磁盘及分区"><h1 id="磁盘设备在-Linux-下的表示方法"><a href="#磁盘设备在-Linux-下的表示方法" class="headerlink" title="磁盘设备在 Linux 下的表示方法"></a>磁盘设备在 Linux 下的表示方法</h1><p>在 Linux 系统中磁盘设备文件的命名规则为：<br><strong>主设备号 + 次设备号 + 磁盘分区号</strong><br>对于目前常见的磁盘，一般表示为：<br><strong>sd[a-z]x</strong><br>主设备号代表设备的类型，相同的主设备号表示同类型的设备。当前常见磁盘的主设备号为 sd。<br>次设备号代表同类设备中的序号，用 “a-z” 表示。比如 &#x2F;dev&#x2F;sda 表示第一块磁盘，&#x2F;dev&#x2F;sdb 表示第二块磁盘。<br>x 表示磁盘分区编号。在每块磁盘上可能会划分多个分区，针对每个分区，Linux 用 &#x2F;dev&#x2F;sdbx 表示，这里的 x 表示第二块磁盘的第 x 个分区。</p><p>如下图所示：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/4.png" class="" title="Linux磁盘及分区"><p>该系统中一共有四块磁盘 &#x2F;dev&#x2F;sda，&#x2F;dev&#x2F;sdb，&#x2F;dev&#x2F;sdc 和 &#x2F;dev&#x2F;sdd。其中的 &#x2F;dev&#x2F;sda 上创建了三个分区，分别是 &#x2F;dev&#x2F;sda1，&#x2F;dev&#x2F;sda2，&#x2F;dev&#x2F;sda5；&#x2F;dev&#x2F;sdb 上只有一个分区 &#x2F;dev&#x2F;sdb1。而 &#x2F;dev&#x2F;sdc 和 &#x2F;dev&#x2F;sdd 则尚未分区(也肯能是只有一个分区，分区的名称和磁盘的名称相同)。</p><h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><p>创建磁盘分区大概有下面几个目的：</p><ul><li>提升数据的安全性(一个分区的数据损坏不会影响其他分区的数据)</li><li>支持安装多个操作系统</li><li>多个小分区对比一个大分区会有性能提升</li><li>更好的组织数据</li></ul><p>本文以常见的 MBR 分区为例介绍磁盘分区中的一些常见概念。MBR 磁盘的分区由主分区、扩展分区和逻辑分区组成。在一块磁盘上，主分区的最大个数是 4，其中扩展分区也是一个主分区，并且最多只能有一个扩展分区，但可以在扩展分区上创建多个逻辑分区。因此主分区(包括扩展分区)的范围是 1-4，逻辑分区从 5 开始。对于逻辑分区，Linux 规定它们必须建立在扩展分区上，而不是建立在主分区上。<br>主分区的作用是用来启动操作系统的，主要存放操作系统的启动或引导程序，因此建议操作系统的引导程序都放在主分区，比如 Linux 的 &#x2F;boot 分区，最好放在主分区上：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/5.png" class="" title="Linux磁盘及分区"><p>扩展分区只不过是逻辑分区的 “容器”。实际上只有主分区和逻辑分区是用来进行数据存储的，因而可以将数据集中存放在磁盘的逻辑分区中。<br>我们可以通过 fdisk 命令来查看磁盘分区的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> fdisk -l /dev/sda</span><br></code></pre></td></tr></table></figure><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/6.png" class="" title="Linux磁盘及分区"><p>输出中的前几行是磁盘的基本信息，比如总大小为 80G，一共有多少个扇区(sector)，每个扇区的大小等等。红框中的则是我们比较关注的分区信息：<br><strong>第一列 Device</strong> 显示了磁盘分区对应的设备文件名。<br><strong>第二列 Boot</strong> 显示是否为引导分区，上图中的 &#x2F;dev&#x2F;sda1 就是引导分区。<br><strong>第三列 Start</strong> 表示磁盘分区的起始位置。<br><strong>第四列 End</strong> 表示磁盘分区的结束位置。<br><strong>第五列 Sectors</strong> 表示分区占用的扇区数目。<br><strong>第六列 Size</strong> 显示分区的大小。<br><strong>第七列和第八列</strong>显示的内容相同，分别是数值 ID 及其文字描述。 Id 列显示了磁盘分区对应的 ID，根据分区的不同，分区对应的 ID 号也不相同。Linux 下用 83 表示主分区和逻辑分区，5 表示扩展分区，8e 表示 LVM 分区，82 表示交换分区，7 表示 NTFS 分区。<br>上图中的信息表明：&#x2F;dev&#x2F;sda1 是一个主分区并且被用作引导分区；&#x2F;dev&#x2F;sda2 是扩展分区，其中只有一个逻辑分区，即 &#x2F;dev&#x2F;sda5，这点可以通过两个分区相同的大小证明。</p><h1 id="利用-fdisk-划分磁盘分区"><a href="#利用-fdisk-划分磁盘分区" class="headerlink" title="利用 fdisk 划分磁盘分区"></a>利用 fdisk 划分磁盘分区</h1><p>fdisk 是 Linux 系统中一款功能强大的磁盘分区管理工具，可以观察硬盘的使用情况，也可以用来管理磁盘分区。本文仅介绍如何使用 fdisk 创建新的磁盘分区。<br>假设我们的 Linux 系统中增加了一块新的磁盘，系统对应的设备名为 &#x2F;dev&#x2F;sdd，下面我们通过 fdisk 命令对这个磁盘进行分区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> fdisk /dev/sdd</span><br></code></pre></td></tr></table></figure><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/7.png" class="" title="Linux磁盘及分区"><p>输入命令 n 来创建新分区：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/8.png" class="" title="Linux磁盘及分区"><p>根据上面的提示，我们选择 p 来创建主分区，然后提示我们输入分区的编号：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/9.png" class="" title="Linux磁盘及分区"><p>主分区的编号为 1- 4，这里我们输入了 1。接下来是设置分区的大小：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/10.png" class="" title="Linux磁盘及分区"><p>分区的大小是通过设置分区开始处的扇区和结束处的扇区设置的。这里如果回车两次会把整个磁盘划分为一个分区，也就是整个磁盘的容器都分给了一个分区。这样一个简单的分区就差不多完成了，注意此时的分区信息还没有写入到磁盘中，在这里还可以反悔，如果确认执行上面的分区，执行 w 命令就行了：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/11.png" class="" title="Linux磁盘及分区"><p>这时分区操作已经完成了，我们可以通过下面的命令查看分区的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> fdisk -l /dev/sdd</span><br></code></pre></td></tr></table></figure><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/12.png" class="" title="Linux磁盘及分区"><p>如果嫌上面的执行过程麻烦，可以用下面的一行命令起到相同的效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">(<span class="hljs-built_in">echo</span> n; <span class="hljs-built_in">echo</span> p; <span class="hljs-built_in">echo</span> 1; <span class="hljs-built_in">echo</span> ; <span class="hljs-built_in">echo</span> ; <span class="hljs-built_in">echo</span> w) | <span class="hljs-built_in">sudo</span> fdisk /dev/sdd</span><br></code></pre></td></tr></table></figure><h1 id="更改分区的类型"><a href="#更改分区的类型" class="headerlink" title="更改分区的类型"></a>更改分区的类型</h1><p>上面创建的分区类型默认为 83(Linux)，如果想要一个 8e(Linux LVM)类型的分区该怎么办？我们可以继续使用 fdisk 命令修改分区的类型，这次输入 t 命令来修改分区的类型：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/13.png" class="" title="Linux磁盘及分区"><p>接下来可以选择要修改的分区号，我们只有一个分区，所以默认就是 1。<br>下面我们可以通过 L 命令来查看 fdisk 命令支持的分区类型：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/14.png" class="" title="Linux磁盘及分区"><p>我们需要创建 LVM，因此我们使用 LVM 的类型代码 8e：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/15.png" class="" title="Linux磁盘及分区"><p>最后输入 w 命令确认变更。再次查看 &#x2F;dev&#x2F;sdd 的分区信息，此时分区类型已经变成了 Linux LVM：</p><img src="/2024/11/18/Linux%E7%A3%81%E7%9B%98%E5%8F%8A%E5%88%86%E5%8C%BA/16.png" class="" title="Linux磁盘及分区"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>分区是使用磁盘的基础，在分区完成后还需要对分区进行格式化，并把格式化后的文件系统挂载到 Linux 系统之后才能存储文件。</p><p>本文转自 <a href="https://www.cnblogs.com/sparkdev/p/10095916.html">https://www.cnblogs.com/sparkdev/p/10095916.html</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <categories>
      
      <category>Linux基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux四剑客及正则表达式</title>
    <link href="/2024/11/18/Linux%E5%9B%9B%E5%89%91%E5%AE%A2%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/11/18/Linux%E5%9B%9B%E5%89%91%E5%AE%A2%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux四剑客及正则表达式"><a href="#Linux四剑客及正则表达式" class="headerlink" title="Linux四剑客及正则表达式"></a>Linux四剑客及正则表达式</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li><strong>基础正则（使用四剑客命令时无需加任何参数即可使用）</strong></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autoit">^    <span class="hljs-meta"># 匹配以某一内容开头 如：<span class="hljs-string">&#x27;^grep&#x27;</span>匹配所有以grep开头的行。    </span><br>$    <span class="hljs-meta"># 匹配以某一内容结尾 如：<span class="hljs-string">&#x27;grep$&#x27;</span> 匹配所有以grep结尾的行。</span><br>^$ <span class="hljs-meta"># 匹配空行。</span><br>.    <span class="hljs-meta"># 匹配任意单个字符 如：<span class="hljs-string">&#x27;gr.p&#x27;</span>匹配gr后接一个任意字符，然后是p。    </span><br>*    <span class="hljs-meta"># 前一个字符出现0次及0次以上 如：<span class="hljs-string">&#x27;a*&#x27;</span>匹配所有有a的行。</span><br>.*   <span class="hljs-meta"># 表示文件中所有内容。</span><br>[]   <span class="hljs-meta"># 匹配一个指定范围内的字符，如<span class="hljs-string">&#x27;[Gg]rep&#x27;</span>匹配Grep和grep。</span><br>[^]  <span class="hljs-meta"># 匹配一个不在指定范围内的字符，如：<span class="hljs-string">&#x27;[^A-Z]rep&#x27;</span> 匹配不包含 A-Z 中的字母开头的行</span><br> 注意：在[]中，除位置在第一个字符的^外，其余任何带含义的特殊符号都会被还原。<br><br></code></pre></td></tr></table></figure><ul><li><p><strong>扩展正则</strong></p><ul><li>使用方法</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span>命令：<br><span class="hljs-keyword">grep</span> -E ……或egrep ……<br>sed命令：<br>sed -r ……<br>awk命令：<br>awk -E ……<br><br></code></pre></td></tr></table></figure><ul><li>表达式</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">+<span class="hljs-meta">#匹配前一个字符连续出现1次或1次以上 如：<span class="hljs-string">&#x27;a+&#x27;</span> 匹配字符a连续出现1次或多次的行。</span><br>注：通常与[]配合使用，过滤连续的内容。<br>&#123;n,m&#125;<span class="hljs-meta">#匹配前一个字符至少n次，最多m次,优先匹配后面的数字</span><br>例：<span class="hljs-string">&#x27;[0-9]&#123;18&#125;&#x27;</span>匹配连续的<span class="hljs-number">18</span>个数字<br>|<span class="hljs-meta">#或者</span><br>例：<span class="hljs-string">&#x27;^$|^#&#x27;</span>匹配文件的空行或以井号开头的<br>()<span class="hljs-meta">#表示一个整体；反向引用/后向引用</span><br><br></code></pre></td></tr></table></figure></li><li><p><strong>单词边界符</strong></p></li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\b</span>    <span class="hljs-comment"># 单词锁定符，如: &#x27;\bgrep\b&#x27;只匹配grep;&#x27;\b[0-9]&#123;18&#125;\b&#x27;只匹配连续的18位数字</span><br><span class="hljs-string">\&lt;</span>    <span class="hljs-comment"># 锚定单词的开始，如:&#x27;\&lt;grep&#x27;匹配包含以grep开头的单词的行。    </span><br><span class="hljs-string">\&gt;</span>    <span class="hljs-comment"># 锚定单词的结束，如&#x27;grep\&gt;&#x27;匹配包含以grep结尾的单词的行。</span><br><span class="hljs-string">\&lt;……\&gt;</span><span class="hljs-comment"># 相当于\b...\b</span><br><span class="hljs-string">\w</span>      <span class="hljs-comment"># 匹配文字和数字字符，也就是[A-Za-z0-9];</span><br><span class="hljs-string">\W</span>      <span class="hljs-comment"># \w的反置形式，匹配一个或多个非单词字符,相当于[^A-Za-z0-9]</span><br><br></code></pre></td></tr></table></figure><h3 id="四剑客"><a href="#四剑客" class="headerlink" title="四剑客"></a>四剑客</h3><h4 id="find-在指定目录下查找文件"><a href="#find-在指定目录下查找文件" class="headerlink" title="find 在指定目录下查找文件"></a>find 在指定目录下查找文件</h4><p><strong>语法形式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">find <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[选项]</span>   #单条件查找<br>find <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[or/and]</span> <span class="hljs-selector-attr">[选项]</span>  #多条件查找<br><br></code></pre></td></tr></table></figure><p><strong>or&#x2F;and</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment">#使用find命令可以多条件查找；</span><br><span class="hljs-literal">-</span>a<span class="hljs-comment">#需要同时满足两个、多个条件时（and可以省略）；</span><br><span class="hljs-literal">-</span>o<span class="hljs-comment">#只需满足其中之一条件时；</span><br><br></code></pre></td></tr></table></figure><p><strong>选项</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">-type f<span class="hljs-regexp">/d/</span>l<span class="hljs-regexp">/b/</span>c<span class="hljs-comment">#按照文件类型查找；</span><br>-name <span class="hljs-string">&quot;NAME&quot;</span><span class="hljs-comment">#按照文件名字查找；</span><br>-iname <span class="hljs-string">&quot;NAME&quot;</span><span class="hljs-comment">#按照文件名字查找（忽略大小写）；</span><br>-inum <span class="hljs-string">&quot;INUM&quot;</span><span class="hljs-comment">#按照文件iNode号查找；</span><br>-maxdepth n<span class="hljs-comment">#按照深度等级查找（向下遍历）；</span><br>-size +n<span class="hljs-regexp">/-n/</span>n<span class="hljs-comment">#按照文件大小查找；</span><br>-mtime +n<span class="hljs-regexp">/-n/</span>n<span class="hljs-comment">#按照文件修改时间查找；当n=0，代表24小时内被修改过的文件；</span><br><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#查找/目录下文件名为dezyan.txt的文件(不区分大小写)</span><br>[root@Dezyan ~]# <span class="hljs-built_in">find</span> / -iname <span class="hljs-string">&quot;dezyan.txt&quot;</span><br>/proc/kcore<br><span class="hljs-comment">#查找/目录下文件大小大于1M的目录</span><br>[root@Dezyan ~]# <span class="hljs-built_in">find</span> / -size +1M -type d<br>注意：当一个目录大小大于1M，说明该目录中存在非常多的小文件<br><span class="hljs-comment">#查找/目录下的字符设备或块设备文件</span><br>[root@Dezyan ~]# <span class="hljs-built_in">find</span> / -type c -o -type b<br>或<span class="hljs-built_in">find</span> / -type c,b<br><span class="hljs-comment">#以深度等级为1查找/目录下以.log结尾的文件</span><br>[root@Dezyan ~]# <span class="hljs-built_in">find</span> / -maxdepth 1 -name <span class="hljs-string">&quot;*.log&quot;</span> -type f<br><span class="hljs-comment">#查找24小时内被修改过的文件</span><br>[root@Dezyan ~]# <span class="hljs-built_in">find</span> ./ -mtime 0<br><br></code></pre></td></tr></table></figure><h5 id="xargs-给其他命令传递参数的一个过滤器"><a href="#xargs-给其他命令传递参数的一个过滤器" class="headerlink" title="xargs 给其他命令传递参数的一个过滤器"></a>xargs 给其他命令传递参数的一个过滤器</h5><p>注意：在xargs后别名失效</p><p><strong>语法形式</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">find …………|<span class="hljs-string"> xargs [文件操作，命令]</span><br><span class="hljs-string">#可以理解为将</span>|<span class="hljs-string">前执行的结果甩到末尾，再执行</span>|<span class="hljs-string">后的命令</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><strong>相关使用方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-n1 <span class="hljs-comment">#按照第一列方式输出内容</span><br><span class="hljs-built_in">ls</span> -l/cat <span class="hljs-comment">#查看找到的文件；</span><br><span class="hljs-built_in">rm</span> [选项]<span class="hljs-comment">#将查找的文件删除；</span><br>-i <span class="hljs-built_in">cp</span>/mv &#123;&#125; [参数]<span class="hljs-comment">#将查找到的文件复制/移动到[参数位置]；</span><br><span class="hljs-built_in">cp</span>/mv -t [参数]<span class="hljs-comment">#将查找到的文件复制/移动到[参数位置]；</span><br><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#将/etc/下大于9M的文件复制到~目录下</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># find /etc/ -size +9M | xargs cp -t ~</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># ls ~ | grep <span class="hljs-string">&#x27;hwd&#x27;</span></span><br>hwdb.bin<br><span class="hljs-meta">#查找出所有大写的.TXT结尾的文件 然后打包成test.tar.gz</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># find ./ -name <span class="hljs-string">&quot;*.TXT&quot;</span>|xargs tar zcvf a.tar.gz</span><br><br></code></pre></td></tr></table></figure><h5 id="exec-调用并执行指定的命令"><a href="#exec-调用并执行指定的命令" class="headerlink" title="exec 调用并执行指定的命令"></a>exec 调用并执行指定的命令</h5><p>注意：使用exec将多个文件压缩成一个压缩包是不可取的，因为按照exec的逻辑，是将前一命令的每一次执行结果依次放入{}，进行压缩时，会不断覆盖文件；</p><p><strong>语法形式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">find …………-exec <span class="hljs-selector-attr">[命令]</span> &#123;&#125; <span class="hljs-selector-attr">[参数]</span> \;<br><br></code></pre></td></tr></table></figure><p>注意：其中&#x3D;&#x3D;；&#x3D;&#x3D;为shell中命令的分隔符，可将多个命令同时执行：mkdir test;touch 1.txt。</p><p><strong>相关使用方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [选项] &#123;&#125; \;<span class="hljs-comment">#将查找的文件删除；</span><br><span class="hljs-built_in">cp</span>/mv &#123;&#125; [参数] \;<span class="hljs-comment">#将查找到的文件复制/移动到[参数位置]；</span><br><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将/etc/下大于9M的文件复制到~目录下</span><br>[root@Dezyan ~]# find /etc/ -size +9M -<span class="hljs-built_in">exec</span>  <span class="hljs-built_in">cp</span> &#123;&#125; ~ \;<br><br></code></pre></td></tr></table></figure><h5 id="使用-和"><a href="#使用-和" class="headerlink" title="使用``和$()"></a>使用``和$()</h5><p><strong>语法形式</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[命令+选项] <span class="hljs-string">`find ……………`</span> <br>[命令+选项] <span class="hljs-string">`find ……………`</span> [参数]<br><br></code></pre></td></tr></table></figure><p>$()效果与``相同</p><p>注意：如果一段命令被添加上了``，那么在整体命令中，需要先执行``中的命令，类似于运算法则中的加减乘除先算（）。</p><p><strong>相关使用方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span>/mv `find ……` [参数]<br><span class="hljs-built_in">ls</span>/rm……<br><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#将<span class="hljs-regexp">/etc/</span>下大于<span class="hljs-number">9</span>M的文件复制到~目录下<br>[root@Dezyan ~]# cp -a `<span class="hljs-keyword">find</span> <span class="hljs-regexp">/etc/</span> -<span class="hljs-keyword">size</span> +<span class="hljs-number">9</span>M` ~<br><br></code></pre></td></tr></table></figure><h4 id="grep-强大的文本搜索工具"><a href="#grep-强大的文本搜索工具" class="headerlink" title="grep 强大的文本搜索工具"></a>grep 强大的文本搜索工具</h4><p><strong>语法形式</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">grep <span class="hljs-comment">[选项]</span> &#x27;<span class="hljs-comment">[word]</span>&#x27; <span class="hljs-comment">[参数]</span><br><br></code></pre></td></tr></table></figure><p><strong>选项</strong></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>v<span class="hljs-comment">#反转查找;</span><br><span class="hljs-literal">-</span>r<span class="hljs-comment">#当指定要查找的是&lt;目录&gt;而非文件时，必须使用这项参数;</span><br><span class="hljs-literal">-</span>E<span class="hljs-comment">#识别扩展正则进行过滤;等同于egrep；</span><br><span class="hljs-literal">-</span>o<span class="hljs-comment">#展示匹配过程;</span><br><span class="hljs-literal">-</span>-----------------------------------------------------------<br><span class="hljs-literal">-</span>-color<span class="hljs-comment">#对筛选出的WORD加颜色显示；建议设置永久别名；</span><br><span class="hljs-literal">-</span>i<span class="hljs-comment">#搜索时不区分大小写；</span><br><span class="hljs-literal">-</span>n<span class="hljs-comment">#搜索出的结果显示行号；</span><br><span class="hljs-literal">-</span>w   <span class="hljs-comment">#过滤的内容两边必须是空格(类似于边界符)</span><br><span class="hljs-literal">-</span>c   <span class="hljs-comment">#统计单词出现的次数;</span><br><span class="hljs-literal">-</span>A   <span class="hljs-comment">#过滤到内容往下2行;</span><br><span class="hljs-literal">-</span>B   <span class="hljs-comment">#过滤到内容往上2行;</span><br><span class="hljs-literal">-</span>C   <span class="hljs-comment">#过滤到内容上下各2行;</span><br><br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#在/etc/passwd文件中过滤出root的行</span><br>[root<span class="hljs-variable">@Dezyan</span> ~]<span class="hljs-comment"># grep &#x27;root&#x27; /etc/passwd</span><br><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">operator:</span><span class="hljs-symbol">x:</span><span class="hljs-number">11</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:operator</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-comment">#不区分大小写过滤出 /etc/ssh/sshd_config 文件中包含`port 22`的行并输出行号</span><br>[root<span class="hljs-variable">@Dezyan</span> ~]<span class="hljs-comment"># grep -i -n  &#x27;port 22&#x27;   /etc/ssh/sshd_config </span><br><span class="hljs-number">17</span><span class="hljs-symbol">:</span><span class="hljs-comment">#Port 22</span><br><span class="hljs-comment">#排除（取反）/etc/selinux/config文件中的#和注释</span><br>[root<span class="hljs-variable">@Dezyan</span> ~]<span class="hljs-comment"># grep -v &#x27;^#|^$&#x27;  /etc/ssh/sshd_config</span><br><span class="hljs-comment">#统计word.txt文件中shutdown单词的个数</span><br>[root<span class="hljs-variable">@Dezyan</span> ~]<span class="hljs-comment"># grep -c &#x27;shutdown&#x27; word.txt </span><br><span class="hljs-number">2</span><br><span class="hljs-comment">#显示文件word.txt中config的上下各两行</span><br>[root<span class="hljs-variable">@Dezyan</span> ~]<span class="hljs-comment">#  grep -C 2 &#x27;config&#x27; word.txt </span><br>test测试<br>server服务<br>configure配置configconfcfg<br>continue继续<br><span class="hljs-keyword">next</span>下一个<br><br></code></pre></td></tr></table></figure><h4 id="sed-功能强大的流式文本编辑器"><a href="#sed-功能强大的流式文本编辑器" class="headerlink" title="sed 功能强大的流式文本编辑器"></a>sed 功能强大的流式文本编辑器</h4><ul><li><strong>语法形式</strong></li></ul><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">sed <span class="hljs-comment">[选项]</span> &#x27;<span class="hljs-comment">[模式]</span><span class="hljs-comment">[动作]</span>&#x27; <span class="hljs-comment">[参数]</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>选项</strong></li></ul><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>n<span class="hljs-comment">#取消内存空间默认输出；不添加时sed命令会默认输出文件所有内容及匹配到的内容；</span><br><span class="hljs-literal">-</span>r<span class="hljs-comment">#使模式中的正则表达式支持扩展正则；</span><br><span class="hljs-literal">-</span>i<span class="hljs-comment">#对源文件进行修改；不添加时不会修改；</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>模式</strong></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">number</span><span class="hljs-comment">#按行查找，查找第n行</span><br><span class="hljs-built_in">number</span>或正则符号，<span class="hljs-built_in">number</span>或正则符号   <span class="hljs-comment">#查找n到m行</span><br>/字符串或正则表达式/  <span class="hljs-comment">#模糊查询，查询包含此字符串的行</span><br>/字符串/,/字符串/ <span class="hljs-comment">#匹配区间：查询两个字符串之间的内容（也可用正则）</span><br>n[动作];m[动作] <span class="hljs-comment">#指定第n行和第m行进行操作</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>动作</strong></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">p#输出打印过滤出的内容<br>d#删除过滤出的内容<br>a字符串    #add 在……后追加xxx <br>i字符串    #insert 在……前插入xxx<br>c字符串    #replace 将……替换为xxx<br>w文件   #将过滤到的内容写入到文件中<br>--------------------------------------------------<br>s###g#<span class="hljs-number">1.</span>其中，g代表全局替换<br>#<span class="hljs-number">2.</span>s<span class="hljs-comment">///g、s@@@g等与s###g效果相同</span><br><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>动作中有p，模式中必有n</p></li><li><p>在使用匹配区间（ &#x2F;开头字符串&#x2F;,&#x2F;结尾字符串&#x2F; ）时，尽量<strong>使用文件内容中唯一的、不重复的字符串</strong>；</p><ul><li>若只有一个开头，有两个甚至多个结尾时：输出的内容只会是<strong>开头到第一个结尾字符串之间的内容</strong>；</li><li>若只有开头，结尾字符串没有：输出的内容为<strong>开头字符串到文件末尾</strong>；</li></ul></li><li><p><strong>sed的后向引用</strong></p></li></ul><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs leaf">sed &#x27;s<span class="hljs-punctuation">#</span><span class="hljs-params">(正则)</span>(数字)(字符串)<span class="hljs-punctuation">#</span>\1\3<span class="hljs-punctuation">#</span><span class="hljs-keyword">g</span>&#x27; <span class="hljs-punctuation">#</span>\n获取第n个()中的内容<br><br></code></pre></td></tr></table></figure><p> <strong>实例</strong></p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-punctuation">#</span>获取IP地址<br>[root@Dezyan ~]<span class="hljs-punctuation">#</span> ip add show ens33 | sed -rn &#x27;3s<span class="hljs-punctuation">#</span>.*et (.*)/24 .*$<span class="hljs-punctuation">#</span>\1<span class="hljs-punctuation">#</span><span class="hljs-keyword">gp</span>&#x27;<br>10.0.0.101<br><br><span class="hljs-punctuation">#</span>批量创建用户test01..test03<br>[root@Dezyan ~]<span class="hljs-punctuation">#</span> echo test&#123;01..03&#125; | xargs -n1 | sed -r &#x27;s<span class="hljs-punctuation">#</span><span class="hljs-params">(.<span class="hljs-operator">*</span>)</span><span class="hljs-punctuation">#</span><span class="hljs-keyword">useradd</span> \1<span class="hljs-punctuation">#</span><span class="hljs-keyword">g</span>&#x27; | bash<br><br><span class="hljs-punctuation">##</span>批量创建用户test01..test03并设置密码为dingzhiyan1016<br>echo test&#123;01..03&#125; | xargs -n1 | sed -r &#x27;s<span class="hljs-punctuation">#</span><span class="hljs-params">(.<span class="hljs-operator">*</span>)</span><span class="hljs-punctuation">#</span><span class="hljs-keyword">useradd</span> \1 ; echo dingzhiyan1016 | passwd --stdin \1<span class="hljs-punctuation">#</span><span class="hljs-keyword">g</span>&#x27; | bash<br>或<br>[root@Dezyan ~]<span class="hljs-punctuation">#</span> echo test11&#123;01..03&#125; | xargs -n1 | sed -r &#x27;s<span class="hljs-punctuation">#</span><span class="hljs-params">(.<span class="hljs-operator">*</span>)</span><span class="hljs-punctuation">#</span><span class="hljs-keyword">useradd</span> \1 ; echo \1:dingzhiyan1016 | chpasswd <span class="hljs-punctuation">#</span><span class="hljs-keyword">g</span>&#x27;  | bash<br><br><span class="hljs-punctuation">#</span>批量删除用户<br>[root@Dezyan ~]<span class="hljs-punctuation">#</span> echo user&#123;1..20&#125; | xargs -n1 | sed -r &#x27;s<span class="hljs-punctuation">#</span><span class="hljs-params">(.<span class="hljs-operator">*</span>)</span><span class="hljs-punctuation">#</span><span class="hljs-keyword">userdel</span> -r \1<span class="hljs-punctuation">#</span><span class="hljs-keyword">g</span>&#x27; | bash<br><br></code></pre></td></tr></table></figure><ul><li><strong>示例</strong></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.<span class="hljs-keyword">a</span>.txt文件<br>[root@Dezyan ~]# <span class="hljs-keyword">cat</span> -n <span class="hljs-keyword">a</span>.txt <br>     <span class="hljs-number">1</span>The <span class="hljs-keyword">first</span> snow came. <br>     <span class="hljs-number">2</span>How beautiful it was, falling <span class="hljs-keyword">so</span> silently <span class="hljs-keyword">all</span> day long,<br>     <span class="hljs-number">3</span><span class="hljs-keyword">all</span> night long.<br>     <span class="hljs-number">4</span><span class="hljs-keyword">on</span> the mountains, <span class="hljs-keyword">on</span> the meadows, <br>     <span class="hljs-number">5</span><span class="hljs-keyword">on</span> the roofs of the living, <span class="hljs-keyword">on</span> the graves of the dead! A<br>     <br><span class="hljs-number">2</span>.查看<span class="hljs-keyword">a</span>.txt文件第三行的内容<br>[root@Dezyan ~]# sed -n <span class="hljs-string">&#x27;3p&#x27;</span> <span class="hljs-keyword">a</span>.txt <br><span class="hljs-keyword">all</span> night long.<br><br><span class="hljs-number">3</span>.查看<span class="hljs-keyword">a</span>.txt文件中第三行到结尾的内容<br>[root@Dezyan ~]#  sed -n <span class="hljs-string">&#x27;3,$p&#x27;</span> <span class="hljs-keyword">a</span>.txt <br><span class="hljs-keyword">all</span> night long.<br><span class="hljs-keyword">on</span> the mountains, <span class="hljs-keyword">on</span> the meadows, <br><span class="hljs-keyword">on</span> the roofs of the living, <span class="hljs-keyword">on</span> the graves of the dead! A<br><br><span class="hljs-number">4</span>.查看<span class="hljs-keyword">a</span>.txt中以<span class="hljs-keyword">o</span>开头或以T开头的行<br>[root@Dezyan ~]# sed -rn <span class="hljs-string">&#x27;/^o|^T/p&#x27;</span> <span class="hljs-keyword">a</span>.txt <br>The <span class="hljs-keyword">first</span> snow came. <br><span class="hljs-keyword">on</span> the mountains, <span class="hljs-keyword">on</span> the meadows, <br><span class="hljs-keyword">on</span> the roofs of the living, <span class="hljs-keyword">on</span> the graves of the dead! A<br><br><span class="hljs-number">5</span>.查看<span class="hljs-keyword">a</span>.txt文件中包含<span class="hljs-keyword">so</span>与meadows行之间的内容<br>[root@Dezyan ~]# sed -n <span class="hljs-string">&#x27;/so/,/meadows/p&#x27;</span> <span class="hljs-keyword">a</span>.txt <br>How beautiful it was, falling <span class="hljs-keyword">so</span> silently <span class="hljs-keyword">all</span> day long,<br><span class="hljs-keyword">all</span> night long.<br><span class="hljs-keyword">on</span> the mountains, <span class="hljs-keyword">on</span> the meadows,<br><br><span class="hljs-number">6</span>.在<span class="hljs-keyword">a</span>.txt文件<span class="hljs-number">1</span>到<span class="hljs-number">3</span>行后都添加一行Dezyan<br>[root@Dezyan ~]# sed <span class="hljs-string">&#x27;1,3i Dezyan&#x27;</span> <span class="hljs-keyword">a</span>.txt <br>Dezyan<br>The <span class="hljs-keyword">first</span> snow came. <br>Dezyan<br>How beautiful it was, falling <span class="hljs-keyword">so</span> silently <span class="hljs-keyword">all</span> day long,<br>Dezyan<br><span class="hljs-keyword">all</span> night long.<br><span class="hljs-keyword">on</span> the mountains, <span class="hljs-keyword">on</span> the meadows, <br><span class="hljs-keyword">on</span> the roofs of the living, <span class="hljs-keyword">on</span> the graves of the dead! A<br><br><span class="hljs-number">7</span>.将<span class="hljs-keyword">a</span>.txt文件中所有的（第一个）<span class="hljs-keyword">on</span>替换为under<br>[root@Dezyan ~]# sed <span class="hljs-string">&#x27;s#on#under#g&#x27;</span> <span class="hljs-keyword">a</span>.txt （只替换第一个只需将g去掉即可）<br>The <span class="hljs-keyword">first</span> snow came. <br>How beautiful it was, falling <span class="hljs-keyword">so</span> silently <span class="hljs-keyword">all</span> day lunderg,<br><span class="hljs-keyword">all</span> night lunderg.<br>under the mountains, under the meadows, <br>under the roofs of the living, under the graves of the dead! A<br><br><span class="hljs-number">8</span>.查找roofs所在行，并将其替换为<span class="hljs-built_in">floor</span>，并且只显示替换行<br>[root@Dezyan ~]# sed -n <span class="hljs-string">&#x27;/roofs/s#roofs#floor#gp&#x27;</span> <span class="hljs-keyword">a</span>.txt<br><span class="hljs-keyword">on</span> the <span class="hljs-built_in">floor</span> of the living, <span class="hljs-keyword">on</span> the graves of the dead! A<br><br><span class="hljs-number">9</span>.删除文件amount.txt中的所有字母<br>[root@Dezyan testdir]# sed -r <span class="hljs-string">&#x27;s#[a-Z]##g&#x27;</span> amount.txt<br><br></code></pre></td></tr></table></figure><h4 id="awk-文本和数据进行处理的编程语言"><a href="#awk-文本和数据进行处理的编程语言" class="headerlink" title="awk 文本和数据进行处理的编程语言"></a>awk 文本和数据进行处理的编程语言</h4><ul><li><strong>语法形式</strong></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">awk [选项] <span class="hljs-string">&#x27;哪一行&#123;print 哪一列&#125;&#x27;</span> [<span class="hljs-built_in">file</span>]<br><span class="hljs-comment">#逻辑：按行取列，先将符合条件的行尽数找出，再对其中的某一列进行选取；</span><br><span class="hljs-comment">#awk本质上其实是一种编程语言，其中可以进行运算；</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>选项</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-operator">-F</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">#指定分隔符；</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>取行</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#当语法形式中的`&#123;print 哪一列&#125;`为空即为取行</span><br><span class="hljs-number">1</span>.指定某行或某几行<br>语法形式：<br>awk <span class="hljs-string">&#x27;NR[运算符]n&#x27;</span> file<br>使用awk内置变量：<br>NR  --&gt; 存储每行的行号<br>运算符：<br>== 等于<br>&gt;  大于<br>&gt;= 大于等于<br>&lt;  小于<br>&lt;= 小于等于<br>!= 不等于<br>&amp;&amp; 且<br>|| 或<br><span class="hljs-comment">#可使用内置函数取出文件内容的最后一行</span><br>awk <span class="hljs-string">&#x27;END&#123;print&#125;&#x27;</span> file<br><span class="hljs-number">2</span>.模糊过滤取行<br>语法形式：<br>awk <span class="hljs-string">&#x27;模式&#x27;</span> file<br>模式<span class="hljs-string">&#x27;可以使用正则符号&#x27;</span>：<br><span class="hljs-regexp">//</span><span class="hljs-comment">#模糊查找文件中的字符串</span><br><span class="hljs-regexp">//</span>,<span class="hljs-regexp">//</span><span class="hljs-comment">#模糊查找两字符串之间的内容</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>字符比对查取行</strong></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript">语法形式：<br>awk [选项] &#x27;[取列内置变量] [模式匹配符] <span class="hljs-string">&quot;[表达式]&quot;</span>&#x27; <span class="hljs-built_in">file</span><br>模式匹配符：<br>==<span class="hljs-comment">#某列等于……</span><br>!=<span class="hljs-comment">#某列不等于……</span><br>~<span class="hljs-comment">#使用正则匹配字符串</span><br>!~<span class="hljs-comment">#使用正则匹配字符串并取反</span><br>表达式：<br>任意字符<br>正则表达式<br><br></code></pre></td></tr></table></figure><ul><li><strong>数字比对查取行</strong></li></ul><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">语法形式：<br>awk <span class="hljs-comment">[选项]</span> &#x27;<span class="hljs-comment">[取列内置变量]</span> <span class="hljs-comment">[模式匹配符]</span><span class="hljs-comment">[运算符]</span>n&#x27; file<br><br></code></pre></td></tr></table></figure><ul><li><strong>取列</strong></li></ul><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment">#当语法形式中的`哪一行`为空即为取列</span><br>语法形式：<br>awk <span class="hljs-string">&#x27;&#123;print [内置变量]&#125;&#x27;</span> <span class="hljs-keyword">file</span><br>awk内置变量：<br><span class="hljs-variable">$0</span>  <span class="hljs-comment"># 表示整行</span><br><span class="hljs-variable">$n</span>  <span class="hljs-comment"># 表示文件的第n列 </span><br>,   <span class="hljs-comment"># 逗号表示空格</span><br>NF  <span class="hljs-comment"># 表示每一行最后一列的列号</span><br><span class="hljs-variable">$NF</span><span class="hljs-comment"># 表示最后一列;`$(NF-1)`表示倒数倒数第二列 --&gt; 也体现了awk支持运算的特性</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>指定分隔符取列</strong></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">语法形式：<br>awk -F <span class="hljs-string">&quot;[表达式]&quot;</span> <span class="hljs-string">&#x27;&#123;print [内置变量]&#125;&#x27;</span> <span class="hljs-keyword">file</span><br>表达式：<br>任意字符<br>正则表达式<br><br></code></pre></td></tr></table></figure><ul><li><strong>指定分隔符按行取列</strong></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">awk -F <span class="hljs-string">&quot;[表达式]&quot;</span> <span class="hljs-string">&#x27;取行方式+取列方式&#x27;</span> <span class="hljs-keyword">file</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>BEGIN的用法</strong></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#BEGIN 是一个特殊的模式，它在处理任何输入行之前执行一次。</span><br>awk -F <span class="hljs-string">&quot;[表达式]&quot;</span> <span class="hljs-string">&#x27;BEGIN&#123;print 任意内容&#125;&#x27;</span> <span class="hljs-built_in">file</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>示例</strong></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#过滤文件的选择：/etc/passwd文件的前10行，存储到了~/passwd.txt中</span><br><span class="hljs-meta">#即：head /etc/passwd &gt;&gt; ~/passwd.txt</span><br><span class="hljs-meta">#在未明确说明分隔符时，默认指定分隔符为<span class="hljs-string">&quot;:&quot;</span></span><br><span class="hljs-number">1.</span>指定取行<br><span class="hljs-meta">#取出文件最后一行 </span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk <span class="hljs-string">&#x27;END&#123;print&#125;&#x27;</span> passwd.txt</span><br><span class="hljs-meta">#取出第7行和第9行以及两行之间的内容</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk <span class="hljs-string">&#x27;NR&gt;=7&amp;&amp;NR&lt;=9&#x27;</span> passwd.txt</span><br><br><span class="hljs-number">2.</span>模糊取行<br><span class="hljs-meta">#取出文件中以root开头和以adm开头以及两行之间的内容</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk <span class="hljs-string">&#x27;/^root/,/^adm/&#x27;</span> passwd.txt</span><br><br><span class="hljs-number">3.</span>字符比对取行<br><span class="hljs-meta">#取出文件中用户名为root的行</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;$1==&quot;root&quot;&#x27;</span> passwd.txt</span><br><span class="hljs-meta">#取出文件中以nologin结尾的行</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;$NF~&quot;nologin$&quot;&#x27;</span> passwd.txt</span><br><br><span class="hljs-number">4.</span>数字比对取行<br><span class="hljs-meta">#取出用户uid大于6的行</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;$3&gt;6&#x27;</span> passwd.txt</span><br><br><span class="hljs-number">5.</span>取列<br><span class="hljs-meta">#输出文件每一行最后一列的序号（以:或\或:\为分隔符）</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F <span class="hljs-string">&quot;[:/]+&quot;</span> <span class="hljs-string">&#x27;&#123;print NF&#125;&#x27;</span> passwd.txt</span><br><span class="hljs-meta">#输出文件的第一列和最后一列（以:或\或:\为分隔符）</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F <span class="hljs-string">&quot;[:/]+&quot;</span> <span class="hljs-string">&#x27;&#123;print $1,$NF&#125;&#x27;</span> passwd.txt</span><br><br><span class="hljs-number">6.</span>BEGIN用法示例<br><span class="hljs-meta">#在输出文件第一列内容前，先输出“用户名”</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;BEGIN&#123;print &quot;用户名&quot;&#125;&#123;print $1&#125;&#x27;</span> passwd.txt</span><br><span class="hljs-meta">#让输出的第一列内容前，都有“用户名：”几个字</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;&#123;print &quot;用户名：&quot;  $1&#125;&#x27;</span> passwd.txt</span><br><br><span class="hljs-number">7.</span>综合运用<br><span class="hljs-meta">#输出文件最后一行的最后一列</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;END&#123;print $NF&#125;&#x27;</span> passwd.txt</span><br><span class="hljs-meta">#输出大于第5行到结尾的内容，并取出第3列</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;NR&gt;5&#123;print $3&#125;&#x27;</span> passwd.txt</span><br><span class="hljs-meta">#输出用户uid大于6的行并输出用户名</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;$3&gt;6&#123;print $1&#125;&#x27;</span> passwd.txt</span><br><span class="hljs-meta">#将系统重不能登录的用户输出到nologin.txt文件中，并在文件的开头显示“不能登录的用户有：”</span><br><span class="hljs-meta">##注：使用awk命令；不能使用管道符</span><br>[root<span class="hljs-symbol">@Dezyan</span> ~/testdir]<span class="hljs-meta"># awk -F: <span class="hljs-string">&#x27;BEGIN&#123;print &quot;不能登录的用户有：&quot;&#125; $NF~&quot;nologin$&quot;&#123;print $1&#125;&#x27;</span> /etc/passwd &gt;&gt; nologin.txt</span><br>不能登录的用户有：<br>bin<br>daemon<br>……………………<br><br><br><br></code></pre></td></tr></table></figure><p>  本文转自 <a href="https://blog.csdn.net/dingzy1/article/details/143837764?spm=1001.2014.3001.5506">https://blog.csdn.net/dingzy1/article/details/143837764?spm=1001.2014.3001.5506</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <categories>
      
      <category>Linux基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为路由器NAT</title>
    <link href="/2024/09/22/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%99%A8NAT/"/>
    <url>/2024/09/22/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%99%A8NAT/</url>
    
    <content type="html"><![CDATA[<p>华为路由器配置NAT  </p><img src="/2024/09/22/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%99%A8NAT/%E6%8B%93%E6%89%91.png" class="" title="华为路由器NAT"><hr><p><strong>配置R1接口和默认路由（基础配置）</strong></p><p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;1<br>[R1-GigabitEthernet0&#x2F;0&#x2F;1]ip address 10.1.1.2 24</p><p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;2<br>[R1-GigabitEthernet0&#x2F;0&#x2F;2]ip address 192.168.11.254 24</p><p>添加默认路由，下一跳指向10.1.1.1<br>[R1]ip route-static 0.0.0.0 0 10.1.1.1</p><p>配置外网R2路由器<br>[R2]interface GigabitEthernet 0&#x2F;0&#x2F;1<br>[R2-GigabitEthernet0&#x2F;0&#x2F;1]ip add 10.1.1.1 24</p><p>配置本地环回接口，模拟互联网站<br>[R2]interface LoopBack 0<br>[R2-LoopBack0]ip address 8.8.8.8 32</p><h3 id="上面配置不变，以下各需求下都用此部分配置"><a href="#上面配置不变，以下各需求下都用此部分配置" class="headerlink" title="上面配置不变，以下各需求下都用此部分配置"></a>上面配置不变，以下各需求下都用此部分配置</h3><p><strong>一，配置静态NAT</strong><br>配置静态NAT，做一对一的地址转换。假设分给内网两个电脑两个公网ip地址10.1.1.3和10.1.1.4用来上网。</p><p>在R1出口GE0&#x2F;0&#x2F;0接口上配置静态NAT，与内网电脑一一对应。</p><p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;1<br>[R1-GigabitEthernet0&#x2F;0&#x2F;1]nat static global 10.1.1.3 inside 192.168.11.3 netmask 255.255.255.255<br>[R1-GigabitEthernet0&#x2F;0&#x2F;1]nat static global 10.1.1.4 inside 192.168.11.4 netmask 255.255.255.255</p><hr><p>给PC配置ip，分别去访问互联网8.8.8.8，都能成功访问  </p><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><strong>二，使用公网地址池，为内网用户做NAT转换。（no-pat）</strong></p><p>如上图不变，假设分给公司A部分10.1.1.10-10.1.1.20为内网192.168.11.0&#x2F;24的员工上网所用。</p><p>在R1上配置地址池<br>[R1]nat address-group 1 10.1.1.10 10.1.1.20</p><p>创建acl，匹配需要上网的内网段<br>[R1]acl 2000<br>[R1-acl-basic-2000]rule permit source 192.168.11.0 0.0.0.255</p><p>在路由出口引用acl 2000，使匹配的网段中的地址可以使用地址池中地址进行NAT转换。</p><p>[R1-GigabitEthernet0&#x2F;0&#x2F;1]nat outbound 2000 address-group 1 no-pat</p><p>在路由出口GE0&#x2F;0&#x2F;1上抓包，可看到内网地址已被转换为10.1.1.10发出。  </p><img src="/2024/09/22/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%99%A8NAT/%E6%8A%93%E5%8C%851.png" class="" title="华为路由器NAT"><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br><strong>三，使用Easy-IP配置NAT实现上网（端口转换）</strong></p><p>如图，拓扑和网段不变，假设公司人员越来越多，公网地址紧张，于是使用Easy IP 的方式满足让B部门上网的需求。</p><p>配置acl 2001匹配内网需要上网的网段<br>[R1]acl 2001<br>[R1-acl-basic-2001]rule permit source 192.168.11.0 0.0.0.255</p><p>到路由出口GE0&#x2F;0&#x2F;1口调用acl 2001</p><p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;1<br>[R1-GigabitEthernet0&#x2F;0&#x2F;1]nat outbound 2001</p><p>用pc去ping 8.8.8.8 ，查看源地址已经是以接口地址发出了。  </p><img src="/2024/09/22/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%99%A8NAT/%E6%8A%93%E5%8C%852.png" class="" title="华为路由器NAT"><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br><strong>四，配置使用公网地址池的NAT端口地址转换。</strong><br>如上图不变，假设分给公司部分10.1.1.30-10.1.1.40为内网192.168.11.0&#x2F;24的员工上网所用，要求利用端口转换实现内网上网。<br>创建可用的公网地址池<br>[R1]nat address-group 2 10.1.1.30 10.1.1.40 &#x2F;&#x2F;配置公网地址池</p><p>配置匹配的内网段<br>[R1]acl 2002 rule<br>[R1-acl-basic-2002]rule permit source 192.168.11.0 0.0.0.255 配置要上网的内网段</p><p>把acl绑定到路由器出口</p><p>[R1]interface GigabitEthernet 0&#x2F;0&#x2F;1<br>[R1-GigabitEthernet0&#x2F;0&#x2F;1]nat outbound 2002 address-group 2</p>]]></content>
    
    
    <categories>
      
      <category>eNSP网络搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eNSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单臂路由VLAN互联</title>
    <link href="/2024/09/13/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1VLAN%E4%BA%92%E8%81%94/"/>
    <url>/2024/09/13/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1VLAN%E4%BA%92%E8%81%94/</url>
    
    <content type="html"><![CDATA[<h1 id="单臂路由VLAN互联"><a href="#单臂路由VLAN互联" class="headerlink" title="单臂路由VLAN互联"></a>单臂路由VLAN互联</h1><h2 id="1、网络拓扑"><a href="#1、网络拓扑" class="headerlink" title="1、网络拓扑"></a>1、网络拓扑</h2><img src="/2024/09/13/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1VLAN%E4%BA%92%E8%81%94/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1.png" class="" title="单臂路由VLAN互联"><h2 id="2、交换机LSW1配置"><a href="#2、交换机LSW1配置" class="headerlink" title="2、交换机LSW1配置"></a>2、交换机LSW1配置</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vlan</span> batch <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">port</span> link-type ac<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">10</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">3</span><br><span class="hljs-attribute">port</span> link-type ac<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">20</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">port</span> link-type tr<br><span class="hljs-attribute">port</span> trunk <span class="hljs-literal">allow</span>-pass vlan <span class="hljs-number">10</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>划两个vlan即可，记得配置trunk口</p><h2 id="3、路由器配置"><a href="#3、路由器配置" class="headerlink" title="3、路由器配置"></a>3、路由器配置</h2><h3 id="3-1-创建两个子接口关联vlan并配置IP"><a href="#3-1-创建两个子接口关联vlan并配置IP" class="headerlink" title="3.1 创建两个子接口关联vlan并配置IP"></a>3.1 创建两个子接口关联vlan并配置IP</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>.<span class="hljs-number">10</span><br><span class="hljs-attribute">dot1q</span> termination  vid <span class="hljs-number">10</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">192.168.10.1</span> <span class="hljs-number">24</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>.<span class="hljs-number">20</span><br><span class="hljs-attribute">dot1q</span> termination  vid <span class="hljs-number">20</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">192.168.20.1</span> <span class="hljs-number">24</span><br><br><span class="hljs-comment">#dis ip int b查看一下是否配置成功</span><br></code></pre></td></tr></table></figure><h3 id="3-2-开启arp广播功能（华为产品特性）"><a href="#3-2-开启arp广播功能（华为产品特性）" class="headerlink" title="3.2 开启arp广播功能（华为产品特性）"></a>3.2 开启arp广播功能（华为产品特性）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">arp broadcast <span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure><h2 id="4、测试结果"><a href="#4、测试结果" class="headerlink" title="4、测试结果"></a>4、测试结果</h2><p>配置成功了！</p><img src="/2024/09/13/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1VLAN%E4%BA%92%E8%81%94/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" class="" title="单臂路由VLAN互联">]]></content>
    
    
    <categories>
      
      <category>eNSP网络搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eNSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防火墙三区域</title>
    <link href="/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/"/>
    <url>/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<img src="/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91.png" class="" title="防火墙三区域"><blockquote><p>实验配置目标：</p><ol><li>trust区域可以访问DMZ区域</li><li>trust区域可以访问unstrust区域</li><li>unstrust区域可以访问DMZ区域</li><li>trust区域可以访问防火墙，防火墙可以访问所有区域</li></ol></blockquote><p>首先把三个区域的接口地址给配置上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs auto">Trust-&gt;R1:<br>sys<br>un in en<br>sysname Trust_R1<br>int e0/0/0<br>ip address 192.168.1.7 24<br>dis this<br><br>Unstrust-&gt;R2:<br>sys <br>un in en<br>sysname Unstrust_R2<br>int e0/0/0<br>ip address 177.7.7.7 24<br>dis this<br></code></pre></td></tr></table></figure><p>DMZ: Server:  </p><img src="/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/dmz.png" class="" title="防火墙三区域"><blockquote><p>使用命令行终端对防火墙进行配置</p></blockquote><p>首先设置好每个接口的IP地址，<code>g0/0/0</code>口除外，这是防火墙的本地口，默认设置<code>192.168.0.1</code>并且划分到<code>Trust</code>区域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs auto">Local-&gt;FW1:<br>Please configure the password：Admin@123<br><br>sys<br>un in en<br>sysname FW1<br>int g1/0/0<br>ip address 192.168.1.1 24<br>dis this<br>int g1/0/1<br>ip address 177.7.7.1 24<br>dis this<br>int g1/0/2<br>ip address  123.4.5.1 24<br>dis this<br>dis ip int brief<br></code></pre></td></tr></table></figure><p>接下来对接口地址进行区域划分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs auto">Local-&gt;FW1:<br>sys<br>firewall zone trust<br>add int g1/0/0<br>dis this<br>quit <br>firewall zone dmz<br>add int g1/0/2<br>dis this <br>quit<br>firewall zone untrust<br>add int g1/0/1<br>dis this<br></code></pre></td></tr></table></figure><p>接下来配置第一个要求：<code>Trust区域可以访问DMZ区域</code>，先需要在防火墙上建立一条<code>Trust</code>区域到<code>DMZ</code>区域的策略，后然在<code>Trust</code>区域的R1上配置一条缺省路由即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs auto">Local-&gt;FW1:<br>sys<br>security-policy<br>rule name trust_to_dmz<br>source-zone trust<br>destination-zone dmz<br>action permit<br>dis this<br><br>Trust-&gt;R1:<br>sys<br>ip route-static 0.0.0.0 0 192.168.1.1<br>dis ip routing-table<br></code></pre></td></tr></table></figure><p>接下来看第二条要求，<code>trust区域可以访问unstrust区域</code><br>首先需要一条trust到untrust的策略，其次因为untrust是外网，不会接受内网<code>192.168.1.7</code>的包，需要做一个NAT源地址转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs auto">Local-&gt;FW1:<br>sys<br>security-policy<br>rule name trsut_to_untrust<br>source-zone trust<br>destination-zone untrust<br>action permit<br>dis this<br>quit<br>quit<br>nat-policy<br>rule name trust_nat_untrsut<br>source-zone trust<br>egress-interface g1/0/1<br>action nat easy-ip<br>dis this<br></code></pre></td></tr></table></figure><p>第三条要求：<code>unstrust区域可以访问DMZ区域</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs auto">Local-&gt;FW1:<br>sys<br>security-policy<br>rule name untrust_to_dmz<br>source-zone untrust<br>destination-zone dmz<br>action permit<br>dis this<br><br>Untrust-&gt;R2:<br>sys<br>ip route-static 0.0.0.0 0 177.7.7.1<br>dis this<br></code></pre></td></tr></table></figure><p>最后一个要求：<code>trust区域可以访问防火墙，防火墙可以访问所有区域</code>，首先，要使得<code>Trust</code>能访问防火墙，需要进入对应接口，允许对应服务，防火墙访问所有区域只需要一条策略允许即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs auto">Local-&gt;FW1:<br>sys<br>int g1/0/0<br>service-manage ping permit<br>dis this <br>quit<br>security-policy<br>rule name local_to_any<br>source-zone local<br>destination-zone any<br>action permit<br>dis this<br></code></pre></td></tr></table></figure><p>自己ping一下验证结果</p><blockquote><p>防火墙web端配置</p></blockquote><p>地址设置以及区域规，在<code>g1/0/0</code>接口设置的勾选上允许<code>ping</code>服务，也就是上述要求的允许<code>trust</code>访问防火墙  </p><img src="/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/fw1.png" class="" title="防火墙三区域"><img src="/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/fw2.png" class="" title="防火墙三区域"> <p>策略在这里加就是了  </p><img src="/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/fw3.png" class="" title="防火墙三区域">  <p>NAT策略在这里  </p><img src="/2024/09/12/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%8C%BA%E5%9F%9F/fw-nat.png" class="" title="防火墙三区域">  <p>web端配置很简单看图配置就是了</p>]]></content>
    
    
    <categories>
      
      <category>eNSP网络搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eNSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接入汇聚核心网络架构</title>
    <link href="/2024/09/01/%E6%8E%A5%E5%85%A5%E6%B1%87%E8%81%9A%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"/>
    <url>/2024/09/01/%E6%8E%A5%E5%85%A5%E6%B1%87%E8%81%9A%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="接入汇聚核心架构网络"><a href="#接入汇聚核心架构网络" class="headerlink" title="接入汇聚核心架构网络"></a>接入汇聚核心架构网络</h1><h2 id="一、网络拓扑图"><a href="#一、网络拓扑图" class="headerlink" title="一、网络拓扑图"></a>一、网络拓扑图</h2><h3 id="1-1-静态路由内网互通"><a href="#1-1-静态路由内网互通" class="headerlink" title="1.1 静态路由内网互通"></a>1.1 静态路由内网互通</h3><img src="/2024/09/01/%E6%8E%A5%E5%85%A5%E6%B1%87%E8%81%9A%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/%E6%8E%A5%E5%85%A5%E6%B1%87%E8%81%9A%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png" class="" title="接入汇聚核心网络架构"><h3 id="1-2-NAT连接互联网"><a href="#1-2-NAT连接互联网" class="headerlink" title="1.2 NAT连接互联网"></a>1.2 NAT连接互联网</h3><img src="/2024/09/01/%E6%8E%A5%E5%85%A5%E6%B1%87%E8%81%9A%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/%E6%8E%A5%E5%85%A5%E6%B1%87%E8%81%9A%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.png" class="" title="接入汇聚核心网络架构"><h2 id="二、接入层交换机配置"><a href="#二、接入层交换机配置" class="headerlink" title="二、接入层交换机配置"></a>二、接入层交换机配置</h2><h3 id="2-1-LSW1配置"><a href="#2-1-LSW1配置" class="headerlink" title="2.1 LSW1配置"></a>2.1 LSW1配置</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sy</span><br><span class="hljs-attribute">sysname</span> JR-<span class="hljs-number">01</span><br><span class="hljs-attribute">vlan</span> batch <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">10</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">20</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">3</span><br><span class="hljs-attribute">port</span> link-type trunk<br><span class="hljs-attribute">port</span> trunk <span class="hljs-literal">allow</span>-pass vlan <span class="hljs-number">10</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="2-2-LSW3配置"><a href="#2-2-LSW3配置" class="headerlink" title="2.2 LSW3配置"></a>2.2 LSW3配置</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sy</span><br><span class="hljs-attribute">sysname</span> JR-<span class="hljs-number">02</span><br><span class="hljs-attribute">vlan</span> batch <span class="hljs-number">30</span> <span class="hljs-number">40</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">30</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">40</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">3</span><br><span class="hljs-attribute">port</span> link-type trunk<br><span class="hljs-attribute">port</span> trunk <span class="hljs-literal">allow</span>-pass vlan <span class="hljs-number">30</span> <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h2 id="三、汇聚层交换机配置"><a href="#三、汇聚层交换机配置" class="headerlink" title="三、汇聚层交换机配置"></a>三、汇聚层交换机配置</h2><h3 id="3-1-LSW2配置"><a href="#3-1-LSW2配置" class="headerlink" title="3.1 LSW2配置"></a>3.1 LSW2配置</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sy</span><br><span class="hljs-attribute">sysname</span> HJ-<span class="hljs-number">01</span><br><span class="hljs-attribute">vlan</span> batch <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">10</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">192.168.10.1</span> <span class="hljs-number">255.255.255.0</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">20</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">192.168.20.1</span> <span class="hljs-number">255.255.255.0</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">port</span> link-type trunk<br><span class="hljs-attribute">port</span> trunk <span class="hljs-literal">allow</span>-pass vlan <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><br><span class="hljs-attribute">q</span><br><span class="hljs-attribute">dhcp</span> en<br><br><span class="hljs-attribute">ip</span> pool for10<br><span class="hljs-attribute">network</span> <span class="hljs-number">192.168.10.0</span> mask <span class="hljs-number">255.255.255.0</span><br><span class="hljs-attribute">gateway</span>-list <span class="hljs-number">192.168.10.1</span><br><span class="hljs-attribute">dns</span>-list <span class="hljs-number">223.5.5.5</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">10</span><br><span class="hljs-attribute">dhcp</span> select global<br><br><span class="hljs-attribute">q</span><br><span class="hljs-attribute">ip</span> pool for20<br><span class="hljs-attribute">network</span> <span class="hljs-number">192.168.20.0</span> mask <span class="hljs-number">255.255.255.0</span><br><span class="hljs-attribute">gateway</span>-list <span class="hljs-number">192.168.20.1</span><br><span class="hljs-attribute">dns</span>-list <span class="hljs-number">223.5.5.5</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">20</span><br><span class="hljs-attribute">dhcp</span> se gl<br><br><span class="hljs-attribute">vlan</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">24</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">10.1.1.1</span> <span class="hljs-number">255.255.255.0</span><br><span class="hljs-comment">#将vlan 24 绑定接口 g0/0/2</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> vlan <span class="hljs-number">24</span><br><span class="hljs-comment">#dis ip int b</span><br><br><span class="hljs-comment">#配置静态路由</span><br><span class="hljs-comment">#dis ip routing-table 192.168.30.254</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.30.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.1.1.2</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.40.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.1.1.2</span><br><br><span class="hljs-comment">#缺省路由/默认路由</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">10.1.1.2</span> <br></code></pre></td></tr></table></figure><h3 id="3-2-LSW4配置"><a href="#3-2-LSW4配置" class="headerlink" title="3.2 LSW4配置"></a>3.2 LSW4配置</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sy</span><br><span class="hljs-attribute">sysname</span> HJ-<span class="hljs-number">02</span><br><span class="hljs-attribute">vlan</span> batch <span class="hljs-number">30</span> <span class="hljs-number">40</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">30</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">192.168.30.1</span> <span class="hljs-number">255.255.255.0</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">40</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">192.168.40.1</span> <span class="hljs-number">255.255.255.0</span><br><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">port</span> link-type trunk<br><span class="hljs-attribute">port</span> trunk <span class="hljs-literal">allow</span>-pass vlan <span class="hljs-number">30</span> <span class="hljs-number">40</span><br><br><span class="hljs-attribute">q</span><br><span class="hljs-attribute">dhcp</span> en<br><br><span class="hljs-comment">#dhcp简化配置，仅限华为部分产品</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">30</span><br><span class="hljs-attribute">dhcp</span> select interface<br><span class="hljs-attribute">dhcp</span> server dns-list <span class="hljs-number">223.5.5.5</span><br><br><span class="hljs-attribute">q</span><br><span class="hljs-comment">#dhcp简化配置，仅限华为部分产品</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">40</span><br><span class="hljs-attribute">dhcp</span> se int<br><span class="hljs-attribute">dhcp</span> server dns-list <span class="hljs-number">223.5.5.5</span><br><br><span class="hljs-attribute">vlan</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">24</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">10.2.1.1</span> <span class="hljs-number">255.255.255.0</span><br><span class="hljs-comment">#将vlan 24 绑定接口 g0/0/2</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> vlan <span class="hljs-number">24</span><br><span class="hljs-comment">#dis ip int b</span><br><br><span class="hljs-comment">#配置静态路由</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.10.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.2.1.2</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.20.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.2.1.2</span><br></code></pre></td></tr></table></figure><h2 id="四、核心层交换机配置"><a href="#四、核心层交换机配置" class="headerlink" title="四、核心层交换机配置"></a>四、核心层交换机配置</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sy</span><br><span class="hljs-attribute">sysname</span> HX-<span class="hljs-number">1</span><br><span class="hljs-attribute">vlan</span> <span class="hljs-number">241</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">241</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">10.1.1.2</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">241</span><br><span class="hljs-comment">#ping 10.1.1.1</span><br><br><span class="hljs-attribute">vlan</span> <span class="hljs-number">242</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">242</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">10.2.1.2</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">port</span> link-type access<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">242</span><br><span class="hljs-comment">#ping 10.2.1.1</span><br><br><span class="hljs-comment">#配置静态路由</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.30.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.2.1.1</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.40.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.2.1.1</span><br><span class="hljs-comment">#回程路由</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.10.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.1.1.1</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.20.0</span> <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">10.1.1.1</span><br><br><span class="hljs-comment">#缺省路由/默认路由</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">10.3.1.2</span> <br><br><span class="hljs-comment">#接入互联网</span><br><span class="hljs-attribute">vlan</span> <span class="hljs-number">243</span><br><span class="hljs-attribute">int</span> vlan <span class="hljs-number">243</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">10.3.1.1</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">3</span><br><span class="hljs-attribute">port</span> link-type ac<br><span class="hljs-attribute">port</span> de vlan <span class="hljs-number">243</span><br></code></pre></td></tr></table></figure><h2 id="五、出口路由器NAT"><a href="#五、出口路由器NAT" class="headerlink" title="五、出口路由器NAT"></a>五、出口路由器NAT</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sy</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">10.3.1.2</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">64.1.1.1</span> <span class="hljs-number">24</span><br><br><span class="hljs-comment">#缺省路由/默认路由</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">64.1.1.2</span><br><span class="hljs-comment">#回程路由</span><br><span class="hljs-attribute">ip</span> route-static <span class="hljs-number">192.168.0.0</span> <span class="hljs-number">255.255.0.0</span> <span class="hljs-number">10.3.1.1</span><br><br><span class="hljs-comment">#利用acl规则进行NAT</span><br><span class="hljs-attribute">acl</span> <span class="hljs-number">2000</span><br><span class="hljs-attribute">rule</span> permit source <span class="hljs-number">192.168.0.0</span> <span class="hljs-number">0.0.255.255</span><br><span class="hljs-comment">#进入WAN口开启NAT</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br><span class="hljs-attribute">nat</span> outbound <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><h2 id="六、互联网服务ISP"><a href="#六、互联网服务ISP" class="headerlink" title="六、互联网服务ISP"></a>六、互联网服务ISP</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sy</span><br><span class="hljs-attribute">sysname</span> ISP<br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">123.56.15.192</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br><span class="hljs-attribute">ip</span> add <span class="hljs-number">64.1.1.2</span> <span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h2 id="七、ACL访问控制列表"><a href="#七、ACL访问控制列表" class="headerlink" title="七、ACL访问控制列表"></a>七、ACL访问控制列表</h2><p>在核心层LSW5上配置ACL</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#acl ? 查看acl命令帮助</span><br><span class="hljs-attribute">acl</span> <span class="hljs-number">3000</span><br><span class="hljs-comment">#允许10段访问30段</span><br><span class="hljs-attribute">rule</span> permit ip source <span class="hljs-number">192.168.10.0</span> <span class="hljs-number">0.0.0.255</span> destination <span class="hljs-number">192.168.30.0</span> <span class="hljs-number">0.0.0.255</span><br><span class="hljs-comment">#禁止20段访问30段</span><br><span class="hljs-attribute">rule</span> <span class="hljs-literal">deny</span> ip source <span class="hljs-number">192.168.20.0</span> <span class="hljs-number">0.0.0.255</span> destination <span class="hljs-number">192.168.30.0</span> <span class="hljs-number">0.0.0.255</span><br><span class="hljs-attribute">int</span> g0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><span class="hljs-comment">#启用acl 3000 规则的流量过滤，华为，H3C产品不写acl规则默认放行</span><br><span class="hljs-attribute">traffic</span>-filter inbound acl <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>eNSP网络搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eNSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引</title>
    <link href="/2024/08/15/MySQL%E7%B4%A2%E5%BC%95/"/>
    <url>/2024/08/15/MySQL%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><ul><li><a href="#_4">前言</a></li><li><a href="#_10">一、索引及分类</a></li><li><ul><li><a href="#1_11">1.索引的概念</a></li><li><a href="#2_18">2.索引的作用</a></li><li><a href="#3_27">3.索引的副作用</a></li><li><a href="#4_33">4.索引的分类</a></li><li><ul><li><a href="#41__34">4.1 普通索引</a></li><li><a href="#42__38">4.2 唯一性索引</a></li><li><a href="#43__44">4.3 主键索引</a></li><li><a href="#44__49">4.4 全文索引</a></li><li><a href="#45__56">4.5 组合索引（单列索引与多列索引）</a></li></ul></li><li><a href="#5_62">5.创建索引的原则依据</a></li></ul></li><li><a href="#_78">二、创建及查看索引</a></li><li><ul><li><a href="#1_81">1.准备</a></li><li><a href="#2_106">2.创建索引的方法</a></li><li><ul><li><a href="#21__107">2.1 创建普通索引</a></li><li><a href="#22__161">2.2 创建唯一索引</a></li><li><a href="#23__200">2.3 创建主键索引</a></li><li><a href="#24__228">2.4 创建全文索引</a></li><li><a href="#25__264">2.5 创建组合索引（单列索引与多列索引）</a></li></ul></li><li><a href="#3_283">3.索引查看方法</a></li></ul></li></ul><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>在企业信息化的过程中，数据库中表的数据量越来越大，性能会急剧下降，创建索引对于保持良好的性能非常关键</li><li>索引是对查询性能优化最有效的手段，能够轻易地将查询性能提高几个数量级</li></ul><hr><h2 id="一、索引及分类"><a href="#一、索引及分类" class="headerlink" title="一、索引及分类"></a>一、索引及分类</h2><h3 id="1-索引的概念"><a href="#1-索引的概念" class="headerlink" title="1.索引的概念"></a>1.索引的概念</h3><ul><li>索引是一种特殊的文件，包含着对数据表中所有记录的引用指针</li><li>通俗点说，索引就好比是一本书的目录，能加快数据库的查询速度</li><li>例如需要遍历 200 条数据，在没有索引的情况下，数据库会遍历全部 200 条数据后选择符合条件的</li><li>而有了相应的索引后，数据库会直接在索引中查找符合条件的选项</li><li>数据库索引就是为了提高表的搜索效率而对某些字段中的值建立的目录</li></ul><h3 id="2-索引的作用"><a href="#2-索引的作用" class="headerlink" title="2.索引的作用"></a>2.索引的作用</h3><p>建立索引的目的是为了加快对表中记录的查找或排序：</p><ul><li>设置了合适的索引之后，数据库利用各种快速定位技术，能够大大加快查询速度，这是创建所有的最主要的原因</li><li>当表很大或查询涉及到多个表时，使用索引可以成千上万倍地提高查询速度</li><li>可以降低数据库的 IO 成本，并且索引还可以降低数据库的排序成本</li><li>通过创建唯一性索引，可以保证数据表中每一行数据的唯一性</li><li>可以加快表与表之间的连接</li><li>在使用分组和排序字句进行数据查询时，可大大减少分组和排序的时间</li></ul><h3 id="3-索引的副作用"><a href="#3-索引的副作用" class="headerlink" title="3.索引的副作用"></a>3.索引的副作用</h3><p>为表设置索引也有代价需要付出：</p><ul><li>索引需要占用额外的磁盘空间</li><li>对于 MyISAM 引擎而言，索引文件和数据文件是分离的，索引文件用于保存数据记录的地址；而 InnoDB 引擎的表数据文件本身就是索引文件</li><li>在插入和修改数据时要花费更多的时间（因为索引也要随之变动）</li></ul><h3 id="4-索引的分类"><a href="#4-索引的分类" class="headerlink" title="4.索引的分类"></a>4.索引的分类</h3><h4 id="4-1-普通索引"><a href="#4-1-普通索引" class="headerlink" title="4.1 普通索引"></a>4.1 普通索引</h4><ul><li>这是最基本的索引类型</li><li>而且它没有唯一性之类的限制</li></ul><h4 id="4-2-唯一性索引"><a href="#4-2-唯一性索引" class="headerlink" title="4.2 唯一性索引"></a>4.2 唯一性索引</h4><ul><li>与普通索引类似，区别是唯一索引列的所有值都只能出现一次，即必须唯一</li><li>当现有数据库中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存</li><li>数据库还可能防止添加将在表中创建重复键值的新数据</li><li>例如，如果在员工信息统计表中对员工的姓（name）上创建了唯一索引，则任何两个员工都不能同姓</li></ul><h4 id="4-3-主键索引"><a href="#4-3-主键索引" class="headerlink" title="4.3 主键索引"></a>4.3 主键索引</h4><ul><li>主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”</li><li>在数据库中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型</li><li>该索引要求主键中每个值都唯一</li></ul><h4 id="4-4-全文索引"><a href="#4-4-全文索引" class="headerlink" title="4.4 全文索引"></a>4.4 全文索引</h4><ul><li>索引类型为 FULLTEXT</li><li>适合在进行模糊查询的时候使用，可用于在一篇文章中检索文本信息</li><li>在 MySQL5.6 版本以前 FULLTEXT 索引仅可用于 MyISAM 引擎，在 5.6 版本之后 innodb 引擎也支持 FULLTEXT 索引</li><li>全文索引可以在 CHAR、VARCHAR 或 TEXT 类型的列上创建</li><li>每个表只允许有一个全文索引</li></ul><h4 id="4-5-组合索引（单列索引与多列索引）"><a href="#4-5-组合索引（单列索引与多列索引）" class="headerlink" title="4.5 组合索引（单列索引与多列索引）"></a>4.5 组合索引（单列索引与多列索引）</h4><ul><li>索引可以是单列上创建的索引，也可以是在多列上创建的索引</li><li>多列索引可以区分其中一列可能有相同值的行</li><li>如果经常同时搜索两列、多列、按两列或多列排序时，索引也很有帮助</li><li>例如，如果经常在同一查询中为姓和名两列设置查询条件，那么这两列上创建多列索引将很有意义</li></ul><h3 id="5-创建索引的原则依据"><a href="#5-创建索引的原则依据" class="headerlink" title="5.创建索引的原则依据"></a>5.创建索引的原则依据</h3><ul><li>索引可以提升数据库查询的速度，但并不是任何情况下都适合创建索引</li><li>因为索引本身会消耗系统资源，在有索引的情况下，数据库会先进行索引查询，然后定位到具体的数据行，如果索引使用不当，反而会增加数据库的负担</li></ul><p>下面列出创建索引的原则依据：</p><ul><li>表的主键、外键必须有索引；主键具有唯一性，索引值也是有唯一的，查询时可以快速定位到数据行；外键一般关联的是另一个表的主键，所以在多表查询时也可以快速定位</li><li>记录数超过300行的表应该有索引；如果没有索引，需要把表遍历一遍，会严重影响数据库的性能</li><li>经常与其他表进行连接的表，在连接字段上应该建立索引</li><li>唯一性太差的字段不适合建立索引，并不能提升查询速度，反而会变慢</li><li>更新太频繁地字段不适合创建索引；在表中进行增、删、改、查时，索引也会有响应操作产生；字段更新的过于频繁，会导致对于系统资源的过多占用</li><li>经常出现在 where 子句中的字段，特别是大表的字段，应该建立索引</li><li>索引应该建在选择性高的字段上；如果很少的字段拥有相同值，即有很多独特之，则选择性很高</li><li>索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引</li></ul><hr><h2 id="二、创建及查看索引"><a href="#二、创建及查看索引" class="headerlink" title="二、创建及查看索引"></a>二、创建及查看索引</h2><p>在 MySQL 中，可以使用命令创建多种类型的索引，也可以查看索引</p><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h3><p>创建好数据库及数据表，以备后续实例使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">create database class;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建库</span><br><br>use class<br>create table member (id int(10),name varchar(10),cardid varchar(18),phone varchar(11),address varchar(50),remark text);<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建表</span><br><br>desc member;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看表结构</span><br><br>insert into member values (1,&#x27;wangyi&#x27;,&#x27;10010&#x27;,&#x27;111111&#x27;,&#x27;wuhan&#x27;,&#x27;this is vip&#x27;);<br>insert into member values (2,&#x27;wanger&#x27;,&#x27;10020&#x27;,&#x27;222222&#x27;,&#x27;changsha&#x27;,&#x27;this is vip&#x27;);<br>insert into member values (3,&#x27;wangsan&#x27;,&#x27;10030&#x27;,&#x27;333333&#x27;,&#x27;qingdao&#x27;,&#x27;this is normal&#x27;);<br>insert into member values (4,&#x27;wangsi&#x27;,&#x27;10040&#x27;,&#x27;444444&#x27;,&#x27;nanjing&#x27;,&#x27;this is normal&#x27;);<br>insert into member values (5,&#x27;wangwu&#x27;,&#x27;10050&#x27;,&#x27;555555&#x27;,&#x27;beijing&#x27;,&#x27;this is vip&#x27;);<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在表中加入数据内容</span><br><br>select * from member;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看表中数据记录</span><br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f8d36e4b27f3eedb79d775369648d878.png" alt="mark"></p><h3 id="2-创建索引的方法"><a href="#2-创建索引的方法" class="headerlink" title="2.创建索引的方法"></a>2.创建索引的方法</h3><h4 id="2-1-创建普通索引"><a href="#2-1-创建普通索引" class="headerlink" title="2.1 创建普通索引"></a>2.1 创建普通索引</h4><ol><li>直接创建索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE INDEX 索引名 ON 表名 (列名[(length)]);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">(列名(length))：length是可选项，下同</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果忽略 length 的值，则使用整个列的值作为索引</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果指定使用列前的 length 个字符来创建索引，这样有利于减小索引文件的大小</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">索引名建议以“_index”结尾</span><br><br><br>例：<br>create index phone_index on member (phone);<br><span class="hljs-meta prompt_">#</span><span class="language-bash">直接创建索引</span><br><br>select phone from member;<br><br>show create table member;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">展示表的结构以及创建表的具体语句</span><br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/8dc262162aa0c97c76305e127a245749.png" alt="mark"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/d50ee761f96f7bba58df94f4deca7708.png" alt="mark"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/9889d517746233c5216a8eaff96eb076.png" alt="mark"></p><ol start="2"><li>修改表的方式创建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">ALTER TABLE 表名 ADD INDEX 索引名 (列名);<br><br><br>例：<br>alter table member add index id_index (id);<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这是第二种创建普通索引的方式，能修改表格式</span><br><br>select id from member;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里查询索引，在自动排序</span><br>select id,name from member;<br><br>show create table member;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/8275e7d81122eb51e910854bc206a079.png" alt="mark"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/ac36f7817cddcffa8e914c2088d4b1ef.png" alt="mark"></p><ol start="3"><li>创建表的时指定索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE 表名 ( 字段1 数据类型,字段2 数据类型[,...],INDEX 索引名 (列名));<br><br><br>例：<br>create table test(id int(4) not null,name varchar(10) not null,cardid varchar(18) not null,index id_index (id));<br><br>show create table test;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/69724dc49c2d411bda1cb3224c469468.png" alt="mark"></p><h4 id="2-2-创建唯一索引"><a href="#2-2-创建唯一索引" class="headerlink" title="2.2 创建唯一索引"></a>2.2 创建唯一索引</h4><ol><li>直接创建索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE UNIQUE INDEX 索引名 ON 表名(列名);<br><br><br>例：<br>create unique index address_index on member (address);<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意，创建唯一索引必须得满足每个值都是唯一的，否则无法创建</span><br><br>show create table member;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d248c4e5cc19b292aae043526d9b8658.png" alt="mark"></p><ol start="2"><li>修改表方式创建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ALTER TABLE 表名 ADD UNIQUE 索引名 (列名);<br><br><br>例：<br>alter table member add unique cardid_index (cardid);<br><br>select cardid from member;<br>show create table member;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/27b36caf4540967271642f4b710becdf.png" alt="mark"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/c1507582cbd4d857caac013913e638b8.png" alt="mark"></p><ol start="3"><li>创建表的时候指定索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE 表名 (字段1 数据类型,字段2 数据类型[,...],UNIQUE 索引名 (列名));<br><br><br>例:<br>create table test0 (id int,name varchar(20),unique id_index (id));<br>show creat table test0;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/2e600ff2dd956c970b40e505a75954c7.png" alt="mark"></p><h4 id="2-3-创建主键索引"><a href="#2-3-创建主键索引" class="headerlink" title="2.3 创建主键索引"></a>2.3 创建主键索引</h4><ol><li>创建表的时候指定索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE 表名 ([...],PRIMARY KEY (列名));<br><br><br>例：<br>create table test1 (id int primary key,name varchar(20));<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这里用了两种方式创建，一种是在字段中直接指定，第二种是在字段结束后指定</span><br>create table test2 (id int,name varchar(20),primary key (id));<br><br>show create table test1;<br>show create table test2;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9038d2b02399ddb454edd5a806a5163a.png" alt="mark"></p><ol start="2"><li>修改表方式创建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">ALTER TABLE 表名 ADD PRIMARY KEY (列名); <br><br><br>例：<br>alter table member add primary key (id);<br><br>show create table member;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f33bcf146a5855139b803e7d606538e0.png" alt="mark"></p><h4 id="2-4-创建全文索引"><a href="#2-4-创建全文索引" class="headerlink" title="2.4 创建全文索引"></a>2.4 创建全文索引</h4><ol><li>直接创建索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE FULLTEXT INDEX 索引名 ON 表名 (列名);<br><br><br>例：<br>create fulltext index remark_index on member (remark);<br><span class="hljs-meta prompt_">#</span><span class="language-bash">全文索引 fulltext，全文只可在 char、varchar、text 类型上创建，且每个表只允许有一个</span><br>show create table member;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ee44f242b5e93a9dcd2b1d5f743c1317.png" alt="mark"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/613f1ae0100bedc5c9caf647e23d84ce.png" alt="mark"></p><ol start="2"><li>修改表方式创建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ALTER TABLE 表名 ADD FULLTEXT 索引名 (列名);<br><br></code></pre></td></tr></table></figure><ol start="3"><li>创建表的时候指定索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE 表名 (字段1 数据类型[,...],FULLTEXT 索引名 (列名));<br><span class="hljs-meta prompt_">#</span><span class="language-bash">数据类型可以为 CHAR、VARCHAR 或者 TEXT</span><br><br></code></pre></td></tr></table></figure><ol start="4"><li>使用全文索引查询</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">SELECT * FROM 表名 WHERE MATCH(列名) AGAINST(&#x27;查询内容&#x27;);<br><br>例：<br>select * from member where match(remark) against(&#x27;this is vip&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/bf9213c1e0cd73e29c00d2ad1a1fea28.png" alt="mark"></p><h4 id="2-5-创建组合索引（单列索引与多列索引）"><a href="#2-5-创建组合索引（单列索引与多列索引）" class="headerlink" title="2.5 创建组合索引（单列索引与多列索引）"></a>2.5 创建组合索引（单列索引与多列索引）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE 表名 (列名1 数据类型,列名2 数据类型,列名3 数据类型,INDEX 索引名 (列名1,列名2,列名3));<br><br>select * from 表名 where 列名1=&#x27;...&#x27; AND 列名2=&#x27;...&#x27; AND 列名3=&#x27;...&#x27;;<br><br><br>例:<br>create table test001 (id int not null,name varchar(20),cardid varchar(20),index index_amd (id,name));<br><br>show create table test001;<br><br>insert into test001 values(1,&#x27;wangsansan&#x27;,&#x27;123123&#x27;);<br><br>select * from test001 where name=&#x27;wangsansan&#x27; and id=1;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/63e9d10d046abbec6be71f07712ee67e.png" alt="mark"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/3333ef8b6ab073be471747cd365f3643.png" alt="mark"></p><h3 id="3-索引查看方法"><a href="#3-索引查看方法" class="headerlink" title="3.索引查看方法"></a>3.索引查看方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">show index from 表名;<br>show index from 表名\G;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在命令后面加上“\G”，可以竖向显示索引的信息</span><br>或<br>show keys from 表名;<br>show keys from 表名\G;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">这两种方法的显示结果完全相同</span><br><br><br>例：<br>show index from member;<br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/112f5823ea3a6af74f2930b9e0b54786.png" alt="mark"></p><p>索引的详细信息：</p><table><thead><tr><th>显示参数</th><th>描述</th></tr></thead><tbody><tr><td>Table</td><td>表名称</td></tr><tr><td>Non_unique</td><td>索引值的唯一性，0 表示唯一性，1 表示非唯一性</td></tr><tr><td>Key_name</td><td>索引的名称</td></tr><tr><td>Seq_in_index</td><td>索引中的列序号，从 1 开始</td></tr><tr><td>Column_name</td><td>列名称</td></tr><tr><td>Collation</td><td>列以什么方式存储在索引中。在 MySQL 中，有值 A（升序）或 NULL（无分类）</td></tr><tr><td>Cardinality</td><td>索引中唯一值数目的估计值</td></tr><tr><td>Sub_part</td><td>如果列只是被部分地编入索引，则为被编入索引的字符的数目；如果整列被编入索引，则为 NULL</td></tr><tr><td>Packed</td><td>指示关键字如何被压缩；如果没有被压缩，则为 NULL</td></tr><tr><td>Null</td><td>如果列含有 NULL，则含有 YES。如果没有，则该列含有 NO</td></tr><tr><td>Index_type</td><td>用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）</td></tr><tr><td>Comment</td><td>备注</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维开发</title>
    <link href="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    <url>/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><ul><li><a href="#CICD_2">CI&#x2F;CD</a></li><li><ul><li><a href="#CI_5">持续集成（CI）</a></li><li><ul><li><a href="#_7">概念</a></li><li><a href="#_10">流程</a></li><li><a href="#_13">关键组件</a></li><li><a href="#_23">作用</a></li></ul></li><li><a href="#CD_33">持续交付（CD）</a></li><li><ul><li><a href="#_35">概念</a></li><li><a href="#_38">流程</a></li><li><a href="#_41">关键组件</a></li><li><a href="#_51">作用</a></li></ul></li></ul></li><li><a href="#GitHub_Action_58">GitHub Action</a></li><li><ul><li><a href="#_60">概念</a></li><li><a href="#_63">基本要点</a></li><li><ul><li><a href="#Workflows_65">工作流（Workflows）</a></li><li><a href="#Jobs_68">任务（Jobs）</a></li><li><a href="#Steps_71">步骤（Steps）</a></li></ul></li><li><a href="#_74">实践场景</a></li><li><ul><li><a href="#_76">需求</a></li><li><a href="#_79">步骤</a></li><li><ul><li><a href="#pull_request_81">创建pull_request工作流文件</a></li><li><a href="#PR_120">提交PR并观察</a></li><li><a href="#_125">创建用于部署的工作流文件</a></li><li><a href="#_202">部署文件</a></li><li><a href="#_226">提交到部署分支并观察</a></li></ul></li></ul></li><li><a href="#_239">其他概念介绍</a></li><li><ul><li><a href="#_241">概念功能</a></li><li><ul><li><a href="#Triggers_243">触发器（Triggers）</a></li><li><a href="#Environments_257">环境（Environments）</a></li><li><a href="#Matrix_Builds_267">矩阵构建（Matrix Builds）</a></li><li><a href="#Caching_275">缓存（Caching）</a></li><li><a href="#Custom_Actions_299">自定义操作（Custom Actions）</a></li><li><a href="#Deployment_302">部署（Deployment）</a></li><li><a href="#Secrets_305">Secrets</a></li></ul></li><li><a href="#_318">语法</a></li><li><ul><li><a href="#_320">工作流程文件结构</a></li><li><a href="#Steps_350">步骤（Steps）</a></li><li><a href="#Actions_363">操作（Actions）</a></li><li><a href="#Matrix_Builds_371">矩阵构建（Matrix Builds）</a></li><li><a href="#_379">环境变量</a></li><li><a href="#Conditions_391">条件（Conditions）</a></li><li><a href="#_400">超时和重试</a></li><li><a href="#Caching_410">缓存（Caching）</a></li></ul></li></ul></li></ul></li></ul><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h2><p>CI&#x2F;CD是<strong>持续集成（Continuous Integration）</strong>和<strong>持续交付（Continuous Delivery）</strong>的缩写，它旨在通过<strong>自动化</strong>的流程和工具，提高软件开发的效率、质量和交付速度。  </p><h3 id="持续集成（CI）"><a href="#持续集成（CI）" class="headerlink" title="持续集成（CI）"></a>持续集成（CI）</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>持续集成是开发团队通过将代码的不同部分集成到共享存储库中，并频繁地进行构建和测试，以确保代码的一致性和稳定性。  </p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>在现在的开发模式中，一般的项目，协同开发是离不开的，这就涉及到多个开发人员编写处理自己负责的功能模块或者某些开发人员共同负责一个模块。于是，通过<strong>版本控制系统</strong>可以将各个开发人员的代码集成在该共享存储库里，在存储库里，每个开发人员根据需求的不同来创建对应的分支，在完成需求后，每个人都需要提交合并将开发分支代码集成在一起，这就需要解决代码冲突，并且如何除了code review之外如何确保这些更改对应用没有产生影响，一旦提交请求合并到主分支，<strong>自动化构建工具</strong>就会根据流程自动编译构建安装应用，并执行<strong>单元测试框架</strong>的自动化测试来校验提交的修改。  </p><h4 id="关键组件"><a href="#关键组件" class="headerlink" title="关键组件"></a>关键组件</h4><p>以下是一些用于构建有效CI流程的关键组件：</p><ol><li><strong>版本控制系统（Version Control System，VCS）</strong>：<ul><li>例如Git，用于跟踪代码变更，协作开发，并确保团队成员之间的代码同步。</li></ul></li><li><strong>自动化构建工具</strong>：<ul><li>如Jenkins、Travis CI、CircleCI等，用于在每次代码提交时自动触发构建过程。</li></ul></li><li><strong>单元测试框架</strong>：<ul><li>例如JUnit（Java）、pytest（Python），用于确保代码的基本功能在集成后仍然有效。</li></ul></li></ol><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li><strong>减少集成问题</strong>： 在传统的开发模式中，团队成员可能在各自的开发分支上独立工作，而在合并时可能会产生冲突和集成问题。CI通过持续集成代码，及时发现和解决这些问题，避免了集成地狱。</li><li><strong>提高代码质量</strong>： CI 强调自动化测试，包括单元测试、集成测试等。每次代码变更都会触发这些测试，确保新代码不会破坏现有功能，并减少引入 bug 的可能性。这有助于提高整体代码质量。</li><li><strong>快速反馈</strong>： CI 通过快速执行自动化构建和测试，提供了即时反馈。开发人员可以在提交代码后迅速得知其是否通过了构建和测试，帮助他们更快速地发现和修复问题。</li><li><strong>提高开发效率</strong>： 通过自动化构建、测试和部署，CI减少了手动操作的需求，提高了开发效率。开发人员可以专注于编写代码而不必花费过多时间在手动构建和测试上。</li><li><strong>自动化部署</strong>： 与持续交付（Continuous Delivery）和持续部署（Continuous Deployment）结合，CI 可以实现自动化部署。这意味着经过测试的代码变更可以自动部署到预定环境，实现快速且可靠的交付流程。</li><li><strong>团队协作</strong>： CI 鼓励团队成员频繁集成代码，确保大家的工作在一个共享的代码库中协同进行。这促进了团队之间的协作和沟通，减少了因代码集成问题而导致的沟通障碍。</li><li><strong>降低风险</strong>： 通过频繁集成和自动测试，CI 减少了发布到生产环境时出现问题的可能性。提前发现和解决问题有助于降低风险，确保稳定的软件交付。</li></ul><h3 id="持续交付（CD）"><a href="#持续交付（CD）" class="headerlink" title="持续交付（CD）"></a>持续交付（CD）</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>持续交付建立在持续集成的基础上，通过自动化的流程确保软件可以随时随地进行部署。  </p><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><p>这时，持续交付后的代码已经在主分支上了，这处于某个版本的待发布的状态，随时可以将开发环境的功能部署到生产环境中（部署到生成环境前还需要在测试环境性能测试、回归测试、自动化测试、人工测试等），运行脚本<strong>构建打包应用</strong>，通过<strong>自动化部署工具</strong>部署到生产环境运行应用，<strong>监控</strong>生产环境指标，如出现问题和错误，可以触发手动或自动<strong>回滚</strong>，如系统正常，则定期回顾，收集反馈，优化，并<strong>持续改进</strong>。  </p><h4 id="关键组件-1"><a href="#关键组件-1" class="headerlink" title="关键组件"></a>关键组件</h4><p>以下是一些用于实现持续交付的关键组件：</p><ol><li><strong>自动化部署工具</strong>：<ul><li>例如Docker、Ansible、Kubernetes等，用于自动化地部署应用程序和其依赖。</li></ul></li><li><strong>环境配置管理</strong>：<ul><li>工具如Terraform，确保不同环境（开发、测试、生产）的一致性。</li></ul></li><li><strong>持续监控和反馈</strong>：<ul><li>使用工具如Prometheus、Grafana，确保在部署后能够监控应用程序的性能和稳定性。</li></ul></li></ol><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><ul><li><strong>快速交付</strong>： 持续交付强调频繁、快速地将新的代码变更交付到生产环境。这使得团队能够更加迅速地响应用户需求，推出新功能或修复 bug。</li><li><strong>稳定交付</strong>： 通过自动化测试、自动化部署和验证流程，持续交付确保每次交付都是经过充分验证的，降低了引入错误的风险，提高了软件的稳定性。</li><li><strong>降低发布成本</strong>： 持续交付通过自动化流程降低了发布的人工成本。这意味着开发团队不再需要手动执行繁琐的部署步骤，减少了错误的可能性，提高了整体效率。</li><li><strong>支持持续改进</strong>： 持续交付是一个循环过程，通过不断收集用户反馈、监控系统性能和流程改进，团队能够不断优化持续交付流程，提高整体效率和质量。</li></ul><h2 id="GitHub-Action"><a href="#GitHub-Action" class="headerlink" title="GitHub Action"></a>GitHub Action</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>采用CI&#x2F;CD可以通过自动化流程和工具自动帮你构建应用、测试应用、部署应用，将你的应用交给流程工具来管理，做到自动触发、验证、部署等功能，从而减省人工成本、提高交付速度，在敏捷开发、DevOps中扮演着重要的角色。<br>GitHub Action正是这样一个实现持续集成交付的自动化流程工具，是由GitHub提供的一个组件。你可以通过YAML文件的配置定义工作流程以构建执行CI&#x2F;CD流水线，并可以触发不同事件时（如代码提交push、Pull Request、schedule）自动执行这些工作流程。  </p><h3 id="基本要点"><a href="#基本要点" class="headerlink" title="基本要点"></a>基本要点</h3><h4 id="工作流（Workflows）"><a href="#工作流（Workflows）" class="headerlink" title="工作流（Workflows）"></a>工作流（Workflows）</h4><p>工作流是GitHub Actions执行任务的基本单位，你可以为Git上不同的事件（如push、pull、request等）定义不同的工作流，以响应操作代码的变更。  </p><h4 id="任务（Jobs）"><a href="#任务（Jobs）" class="headerlink" title="任务（Jobs）"></a>任务（Jobs）</h4><p>工作流程由一个或多个任务组成，每个任务运行在独立的虚拟环境中。任务可以是构建、测试、部署等操作。  </p><h4 id="步骤（Steps）"><a href="#步骤（Steps）" class="headerlink" title="步骤（Steps）"></a>步骤（Steps）</h4><p>任务由多个步骤组成，每个步骤执行一个操作。一个步骤可以是运行命令、使用某个预定义的操作，或者调用自定义脚本。  </p><h3 id="实践场景"><a href="#实践场景" class="headerlink" title="实践场景"></a>实践场景</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>假如我们对项目中其中一个服务做了修改，添加了某些功能，完成任务后，我们在本地分支通过Git提交代码到Github项目仓库下的dev分支（这里直接本地提交到测试分支，省去测试环境测试的流程），并请求合并到master分支，这时，我们希望在合并之前先对该模块进行构建，运行测试来校验代码质量与验证代码是否出错，确保代码的基本功能在集成后仍然有效，测试通过后，提交到打包部署分支bdeploy来自动将模块打包成一个容器镜像推送到容器镜像仓库，并将docker-compose文件拷贝到远程生产服务器执行部署。  </p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="创建pull-request工作流文件"><a href="#创建pull-request工作流文件" class="headerlink" title="创建pull_request工作流文件"></a>创建pull_request工作流文件</h5><p>在项目目录下创建.github&#x2F;workflows目录<br>添加compile.yml文件用于构建并测试项目：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">compile</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">paths:</span> <span class="hljs-comment">#当有 pull request，且文件路径包含 Java 文件或者当前的工作流配置文件时触发。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**.java&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">.github/workflows/compile.yml</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">compile:</span> <span class="hljs-comment">#任务名称</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">timeout-minutes:</span> <span class="hljs-number">30</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span> <span class="hljs-comment">#actions/checkout@v3 是 GitHub Actions 中一个常用的操作（Action），用于从存储库中检出代码。@v3 是指定该 Action 的版本号。在这里，v3 表示使用的是版本 3。</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Java</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-java@v3</span> <span class="hljs-comment">#actions/setup-java@v3 操作被用于设置 Java 运行环境</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">java-version:</span> <span class="hljs-string">&#x27;11&#x27;</span> <span class="hljs-comment"># 指定所需的 Java 版本</span><br>          <span class="hljs-attr">distribution:</span> <span class="hljs-string">&#x27;temurin&#x27;</span> <span class="hljs-comment">#&#x27;temurin&#x27; 表示使用 Temurin（先前称为 AdoptOpenJDK） 的发行版。Temurin 提供了免费的、社区驱动的 OpenJDK 发行版。</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">Maven</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">mvn</span> <span class="hljs-string">clean</span> <span class="hljs-string">install</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">JUnit</span> <span class="hljs-string">test</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">mvn</span> <span class="hljs-string">test</span><br><br></code></pre></td></tr></table></figure><p>上面工作流配置文件定义了在pull_request的时候会触发任务<br>定义了一个任务<code>compile</code>的四个步骤：</p><ul><li><code>Checkout code</code>：从存储库中检出代码</li><li><code>Set up Java</code>：设置Java运行环境</li><li><code>Build with Maven</code>：构建安装相关依赖</li><li><code>Run JUnit test</code>：执行单元测试</li></ul><h5 id="提交PR并观察"><a href="#提交PR并观察" class="headerlink" title="提交PR并观察"></a>提交PR并观察</h5><p>将当前分支的代码推送到远程github项目仓库的dev分支，并提PR请求合并到master分支。  </p><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/pr1.png" class="" title="运维开发"><p>提交PR后会自动触发执行工作流任务，查看详细：<br>依次执行了我们定义的任务，并且设置环境、执行构建和测试通过  </p><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/pr2.png" class="" title="运维开发"><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/pr3.png" class="" title="运维开发"><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/pr4.png" class="" title="运维开发"><p>之后可以选择合并此PR到master分支，将修改的代码合并到主分支准备部署。  </p><h5 id="创建用于部署的工作流文件"><a href="#创建用于部署的工作流文件" class="headerlink" title="创建用于部署的工作流文件"></a>创建用于部署的工作流文件</h5><p>代码合并到master分支后，在.github&#x2F;workflows目录目录下创建用于部署的工作流文件bdeploy.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">and</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">for</span> <span class="hljs-string">aliyun</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">bdeploy</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">timeout-minutes:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">strategy:</span> <span class="hljs-comment">#矩阵策略</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">java:</span> [ <span class="hljs-string">&#x27;11&#x27;</span> ]<br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span> <span class="hljs-comment">#actions/checkout@v3 是 GitHub Actions 中一个常用的操作（Action），用于从存储库中检出代码。@v3 是指定该 Action 的版本号。在这里，v3 表示使用的是版本 3。</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Java</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-java@v3</span> <span class="hljs-comment">#actions/setup-java@v3 操作被用于设置 Java 运行环境</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">java-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.java</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># 指定所需的 Java 版本</span><br>          <span class="hljs-attr">distribution:</span> <span class="hljs-string">&#x27;temurin&#x27;</span> <span class="hljs-comment">#&#x27;temurin&#x27; 表示使用 Temurin（先前称为 AdoptOpenJDK） 的发行版。Temurin 提供了免费的、社区驱动的 OpenJDK 发行版。</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">base</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">mvn</span> <span class="hljs-string">clean</span> <span class="hljs-string">install</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">container</span> <span class="hljs-string">image</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">mvn</span> <span class="hljs-string">clean</span> <span class="hljs-string">package</span> <span class="hljs-string">-DskipTests</span> <span class="hljs-string">jib:build</span> <span class="hljs-comment"># -Pdocker</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">server</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo -e &quot;[demo] \n$&#123;&#123; secrets.SERVER_DEMO &#125;&#125; ansible_ssh_port=$&#123;&#123; secrets.PORT_DEMO &#125;&#125; ansible_ssh_user=$&#123;&#123; secrets.ACCOUNT_DEMO &#125;&#125; ansible_ssh_pass=&#x27;$&#123;&#123; secrets.PASSWORD_DEMO &#125;&#125;&#x27;&quot; &gt; ./hostfile</span><br><span class="hljs-string">          docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;touch /usr/local/demo/docker-compose-deploy.yml &amp;&amp; mv /usr/local/demo/docker-compose-deploy.yml /usr/local/demo/docker-compose-deploy.yml_bak&quot;</span><br><span class="hljs-string">          docker run -v $PWD/hostfile:/tmp/hostfile -v $PWD/deploy:/tmp/deploy -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m copy -a &quot;src=/tmp/deploy/prod/docker-compose-deploy.yml dest=/usr/local/demo/docker-compose-deploy.yml&quot;</span><br><span class="hljs-string">          docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;docker login --username=$&#123;&#123; secrets.ALINYUN_USERNAME &#125;&#125; --password=$&#123;&#123; secrets.ALINYUN_PASSWORD &#125;&#125; registry.cn-hangzhou.aliyuncs.com&quot;</span><br><span class="hljs-string">          docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;docker-compose -f /usr/local/demo/docker-compose-deploy.yml --compatibility up -d &quot;</span><br><span class="hljs-string">          docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;docker logout registry.cn-hangzhou.aliyuncs.com&quot;</span><br><span class="hljs-string">          rm -f hostfile</span><br></code></pre></td></tr></table></figure><p>上面工作流文件创建了一个名为Build and Deploy for aliyun的工作，定义了一个任务<code>build</code>的五个步骤：</p><ul><li><code>Checkout code</code>：从存储库中检出代码</li><li><code>Set up Java</code>：设置Java运行环境</li><li><code>Build base</code>：安装依赖构建项目</li><li><code>Build container image</code>：执行Google Jib的maven插件将当前项目打包并推送到远程容器镜像仓库。该插件的具体用法可参考我之前写的文章：</li></ul><p><a href="https://blog.csdn.net/weixin_44268936/article/details/133385011?spm=1001.2014.3001.5501">轻松构建Docker镜像：无需Docker引擎的Google Jib-CSDN博客</a></p><ul><li><code>Deploy server</code>：该部分实现了通过拷贝我们即定的docker-compose文件到远程服务器上，并在远程服务上拉取该项目的容器镜像，最后启动容器来实现部署。操作远程服务器的行为借助了<strong>自动化运维工具ansible</strong>。</li></ul><p>Ansible是一种自动化工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。它是一个开源工具，使用简单，无需在被管理的主机上安装客户端，而且支持多云环境和多种操作系统。<br><a href="https://www.ansible.com/">Ansible is Simple IT Automation</a></p><p>我们来看下<code>Deploy server</code>做了什么</p><p><code>run: |</code><br>“| ”是 YAML 语法中的一个标记，表示执行一个多行字符串块，也称为“折叠块”（folded block）或“纵向线条”（vertical line），“ | ”后面的缩进代码块是一个 shell 命令的多行字符串。这样的写法允许你在一个步骤中执行多个命令，而不需要每个命令都单独使用一个步骤。</p><p><code>echo -e &quot;[demo] \n$&#123;&#123; secrets.SERVER_DEMO &#125;&#125; ansible_ssh_port=$&#123;&#123; secrets.PORT_DEMO &#125;&#125; ansible_ssh_user=$&#123;&#123; secrets.ACCOUNT_DEMO &#125;&#125; ansible_ssh_pass=&#39;$&#123;&#123; secrets.PASSWORD_DEMO &#125;&#125;&#39;&quot; &gt; ./hostfile</code><br>将要登陆的服务信息写入<code>hostfile</code>文件，<code>[ ]</code>里用于指定一个服务组别。<br>写入的格式为ansible可识别的主机清单文件格式，格式风格为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs auto">[web_servers]<br>ansible_host ansible_ssh_port=22 ansible_ssh_user=username ansible_ssh_pass=password<br></code></pre></td></tr></table></figure><p><code>$&#123;&#123; &#125;&#125;</code>为Github Actions的<code>secrets and variables</code>语法。<br>可以在项目的<code>Setting</code>的<code>secrets and variables</code>的<code>Actions</code>下来创建这些<code>Repository secrets</code>  </p><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/re1.png" class="" title="运维开发"><p><code>docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;touch /usr/local/demo/docker-compose-deploy.yml &amp;&amp; mv /usr/local/demo/docker-compose-deploy.yml /usr/local/demo/docker-compose-deploy.yml_bak&quot;</code><br>将本地主机的 hostfile 文件挂载到容器中的 &#x2F;tmp&#x2F;hostfile 目录，以提供 Ansible 主机清单。-i &#x2F;tmp&#x2F;hostfile 指定了 Ansible 主机清单文件的路径，demo 是指定的主机组。-m shell：使用 Ansible 的 shell 模块，该模块用于在目标主机上执行 shell 命令。-a “touch &#x2F;usr&#x2F;local&#x2F;demo&#x2F;docker-compose-deploy.yml &amp;&amp; mv &#x2F;usr&#x2F;local&#x2F;demo&#x2F;docker-compose-deploy.yml &#x2F;usr&#x2F;local&#x2F;demo&#x2F;docker-compose-deploy.yml_bak”：是 shell 模块的参数，其中包含要执行的 shell 命令，这创建了一个空的 docker-compose-deploy.yml 文件（如果不存在），将现有的 docker-compose-deploy.yml 部署文件备份。</p><p><code>docker run -v $PWD/hostfile:/tmp/hostfile -v $PWD/deploy:/tmp/deploy -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m copy -a &quot;src=/tmp/deploy/prod/docker-compose-deploy.yml dest=/usr/local/demo/docker-compose-deploy.yml&quot;</code><br>将本地主机的 hostfile 文件挂载到容器中的 &#x2F;tmp&#x2F;hostfile 目录，这是为了将本地主机上的 Ansible 主机清单文件提供给容器使用，并且将deploy目录下的文件挂载到容器中的 &#x2F;tmp&#x2F;deploy 目录，用于传递部署相关的文件。<br>-m copy 使用 Ansible 的 copy 模块，该模块用于复制文件。-a “src&#x3D;&#x2F;tmp&#x2F;deploy&#x2F;prod&#x2F;docker-compose-deploy.yml dest&#x3D;&#x2F;usr&#x2F;local&#x2F;demo&#x2F;docker-compose-deploy.yml” 是 copy 模块的参数，指定了源文件和目标文件的路径，这将刚刚挂载到ansible容器内的部署文件复制到远程主机的指定目录文件下，方便后续启动部署的项目容器。</p><p><code>docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;docker login --username=$&#123;&#123; secrets.ALINYUN_USERNAME &#125;&#125; --password=$&#123;&#123; secrets.ALINYUN_PASSWORD &#125;&#125; registry.cn-hangzhou.aliyuncs.com&quot;</code><br>在远程服务上执行docker login登录到阿里云的容器镜像仓库。</p><p><code>docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;docker-compose -f /usr/local/demo/docker-compose-deploy.yml --compatibility up -d &quot;</code><br>在远程服务器上执行docker-compose up来启动项目容器。</p><p><code>docker run -v $PWD/hostfile:/tmp/hostfile -e ANSIBLE_HOST_KEY_CHECKING=false --rm ghcr.io/yunhorn/ubuntu:ansible ansible -i /tmp/hostfile demo -m shell -a &quot;docker logout registry.cn-hangzhou.aliyuncs.com&quot;</code><br><code>rm -f hostfile</code><br>最后退出阿里云的容器镜像仓库并删除本地（Github项目上）hostfile文件。  </p><h5 id="部署文件"><a href="#部署文件" class="headerlink" title="部署文件"></a>部署文件</h5><p>编写用于部署我们提交的项目的docker-compose部署相关的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.7&quot;</span><br><br><span class="hljs-attr">x-logging:</span><br>  <span class="hljs-string">&amp;default-logging</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">non-blocking</span><br>    <span class="hljs-attr">max-buffer-size:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-string">&quot;demo.<span class="hljs-template-variable">&#123;&#123;.Name&#125;&#125;</span>&quot;</span>  <span class="hljs-comment">#配置容器的tag,以demo.为前缀,容器名称为后缀,docker-compose会给容器添加副本后缀</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">demo:</span><br>    <span class="hljs-attr">logging:</span> <span class="hljs-string">*default-logging</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span> <span class="hljs-comment">#该服务内运行的进程将以root用户的身份启动</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/minggo/demo:0.0.2-SNAPSHOT</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8081</span><span class="hljs-string">:8081</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">server.port=8081</span><br></code></pre></td></tr></table></figure><h5 id="提交到部署分支并观察"><a href="#提交到部署分支并观察" class="headerlink" title="提交到部署分支并观察"></a>提交到部署分支并观察</h5><p>假设我们的部署分支是<code>bdeploy</code>，提交到该分支后会自动触发用于部署的工作流文件的任务。<br>在任务里会看到成功构建容器镜像并推送到阿里云容器镜像仓库：  </p><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/de1.png" class="" title="运维开发"> <p>成功拷贝我们的部署文件到远程服务，并且拉取我们刚刚推送的容器镜像，在服务器上创建了该容器，从而实现了项目的部署。  </p><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/de2.png" class="" title="运维开发"> <img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/de3.png" class="" title="运维开发"> <p>我们到服务器上查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/do1.png" class="" title="运维开发"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><img src="/2024/08/03/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/do2.png" class="" title="运维开发"><p>以上就是一个基本的持续集成部署流程的示例，展示了如何使用 GitHub Actions 自动化构建、测试和部署一个 Java应用项目的过程。当然，GitHub Actions 的功能远不止这些，它提供了丰富的集成和自定义选项，满足各种复杂的自动化需求。  </p><h3 id="其他概念介绍"><a href="#其他概念介绍" class="headerlink" title="其他概念介绍"></a>其他概念介绍</h3><h4 id="概念功能"><a href="#概念功能" class="headerlink" title="概念功能"></a>概念功能</h4><h5 id="触发器（Triggers）"><a href="#触发器（Triggers）" class="headerlink" title="触发器（Triggers）"></a>触发器（Triggers）</h5><p>GitHub Actions 的工作流程可以通过多种触发器启动。除了常见的 on: push，还有 on: pull_request、on: schedule（定时触发）等。触发器的选择取决于你想要的 CI&#x2F;CD 触发条件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">schedule:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span> <span class="hljs-string">&#x27;0 0 * * *&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="环境（Environments）"><a href="#环境（Environments）" class="headerlink" title="环境（Environments）"></a>环境（Environments）</h5><p>GitHub Actions 允许你为特定的任务或步骤定义环境。这可以是不同的操作系统（如 Windows、Linux、macOS），也可以是自定义的虚拟环境。这对于需要在不同环境中运行的项目非常有用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br></code></pre></td></tr></table></figure><h5 id="矩阵构建（Matrix-Builds）"><a href="#矩阵构建（Matrix-Builds）" class="headerlink" title="矩阵构建（Matrix Builds）"></a>矩阵构建（Matrix Builds）</h5><p>矩阵构建允许在不同参数下并行运行同一个工作流。这对于在多个版本、操作系统或配置下测试和构建应用程序非常有用，可以加速整个流程。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">strategy:</span><br>  <span class="hljs-attr">matrix:</span><br>    <span class="hljs-attr">node-version:</span> [<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>]<br></code></pre></td></tr></table></figure><h5 id="缓存（Caching）"><a href="#缓存（Caching）" class="headerlink" title="缓存（Caching）"></a>缓存（Caching）</h5><p>GitHub Actions 允许你缓存依赖项，以减少构建和测试的时间。通过缓存，你可以在不重复下载或构建相同依赖项的情况下提高工作流的效率。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Node.js</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">dependencies</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">~/.npm</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/*.lock&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br></code></pre></td></tr></table></figure><h5 id="自定义操作（Custom-Actions）"><a href="#自定义操作（Custom-Actions）" class="headerlink" title="自定义操作（Custom Actions）"></a>自定义操作（Custom Actions）</h5><p>除了使用 GitHub Actions 提供的内置操作外，你还可以创建自己的自定义操作。这些操作可以在不同的工作流程中重复使用，使得你的配置更加模块化和可维护。  </p><h5 id="部署（Deployment）"><a href="#部署（Deployment）" class="headerlink" title="部署（Deployment）"></a>部署（Deployment）</h5><p>GitHub Actions 可以与部署目标（如服务器、云服务、容器等）集成，实现自动化部署。使用预定义的 deploy 操作或者自定义脚本，你可以将应用程序快速部署到目标环境。  </p><h5 id="Secrets"><a href="#Secrets" class="headerlink" title="Secrets"></a>Secrets</h5><p>Secrets 允许你安全地存储和使用敏感信息，如 API 密钥、访问令牌等。这些 Secrets 可以在工作流程中被引用，但不会被显示在日志中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">production</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">my-custom-deployment-action</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">api-key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_API_KEY</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><h5 id="工作流程文件结构"><a href="#工作流程文件结构" class="headerlink" title="工作流程文件结构"></a>工作流程文件结构</h5><p>一个 GitHub Actions 的工作流程文件通常包含以下几个部分：</p><ul><li><strong>name</strong>： 定义工作流程的名称。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">My</span> <span class="hljs-string">CI/CD</span> <span class="hljs-string">Workflow</span><br></code></pre></td></tr></table></figure><ul><li><strong>on</strong>： 定义触发工作流程的事件，如 push、pull_request 等。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><ul><li><strong>jobs</strong>： 定义工作流程中的任务，一个任务可以包含多个步骤。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="步骤（Steps）-1"><a href="#步骤（Steps）-1" class="headerlink" title="步骤（Steps）"></a>步骤（Steps）</h5><p>步骤定义了工作流程中的具体操作。每个步骤都包含一个或多个命令，可以是运行脚本、使用预定义的操作或自定义的操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Node.js</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>    <span class="hljs-attr">with:</span><br>      <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="操作（Actions）"><a href="#操作（Actions）" class="headerlink" title="操作（Actions）"></a>操作（Actions）</h5><p>操作是可重用的、独立的任务单元。GitHub Actions 提供了一系列官方操作，也允许用户创建自定义的操作。操作可以通过 uses 字段引入。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">a</span> <span class="hljs-string">custom</span> <span class="hljs-string">action</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">./path/to/my-action</span><br></code></pre></td></tr></table></figure><h5 id="矩阵构建（Matrix-Builds）-1"><a href="#矩阵构建（Matrix-Builds）-1" class="headerlink" title="矩阵构建（Matrix Builds）"></a>矩阵构建（Matrix Builds）</h5><p>矩阵构建允许在不同参数下并行运行同一个工作流。这在同时测试多个版本或环境时非常有用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">strategy:</span><br>  <span class="hljs-attr">matrix:</span><br>    <span class="hljs-attr">node-version:</span> [<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>]<br></code></pre></td></tr></table></figure><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><p>可以使用 env 字段定义环境变量，这些变量可以在工作流程的各个步骤中使用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">MY_VARIABLE:</span> <span class="hljs-string">&#x27;some value&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">environment</span> <span class="hljs-string">variable</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$MY_VARIABLE</span><br></code></pre></td></tr></table></figure><h5 id="条件（Conditions）"><a href="#条件（Conditions）" class="headerlink" title="条件（Conditions）"></a>条件（Conditions）</h5><p>可以使用 if 字段为步骤定义条件，根据条件来决定是否执行该步骤。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">only</span> <span class="hljs-string">on</span> <span class="hljs-string">main</span> <span class="hljs-string">branch</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.ref</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;refs/heads/main&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="超时和重试"><a href="#超时和重试" class="headerlink" title="超时和重试"></a>超时和重试</h5><p>使用 timeout-minutes 定义步骤的最大执行时间，使用 retry 定义步骤的最大重试次数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">My</span> <span class="hljs-string">step</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br>    <span class="hljs-attr">timeout-minutes:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="缓存（Caching）-1"><a href="#缓存（Caching）-1" class="headerlink" title="缓存（Caching）"></a>缓存（Caching）</h5><p>使用 actions&#x2F;cache 操作可以缓存依赖项，以减少构建和测试的时间。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">dependencies</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br>    <span class="hljs-attr">with:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">~/.npm</span><br>      <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/*.lock&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL手册</title>
    <link href="/2024/08/03/MySQL%E6%89%8B%E5%86%8C/"/>
    <url>/2024/08/03/MySQL%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文针对关系型数据库的一般语法。限于篇幅，本文侧重说明用法，不会展开讲解特性、原理。</p></blockquote><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="数据库术语"><a href="#数据库术语" class="headerlink" title="数据库术语"></a>数据库术语</h3><ul><li><code>数据库（database）</code> - 保存有组织的数据的容器（通常是一个文件或一组文件）。</li><li><code>数据表（table）</code> - 某种特定类型数据的结构化清单。</li><li><code>模式（schema）</code> - 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。</li><li><code>列（column）</code> - 表中的一个字段。所有表都是由一个或多个列组成的。</li><li><code>行（row）</code> - 表中的一个记录。</li><li><code>主键（primary key）</code> - 一列（或一组列），其值能够唯一标识表中每一行。</li></ul><h3 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h3><blockquote><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL&#x2F;SQL、Transact-SQL 等。</p></blockquote><h4 id="SQL-语法结构"><a href="#SQL-语法结构" class="headerlink" title="SQL 语法结构"></a>SQL 语法结构</h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa77ca4cc88a8a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="sql-syntax"></p><p>SQL 语法结构包括：</p><ul><li><strong><code>子句</code></strong> - 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）</li><li><strong><code>表达式</code></strong> - 可以产生任何标量值，或由列和行的数据库表</li><li><strong><code>谓词</code></strong> - 给需要评估的 SQL 三值逻辑（3VL）（true&#x2F;false&#x2F;unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。</li><li><strong><code>查询</code></strong> - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。</li><li><strong><code>语句</code></strong> - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。</li></ul><h4 id="SQL-语法要点"><a href="#SQL-语法要点" class="headerlink" title="SQL 语法要点"></a>SQL 语法要点</h4><ul><li><strong>SQL 语句不区分大小写</strong>，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。</li></ul><p>例如：<code>SELECT</code> 与 <code>select</code> 、<code>Select</code> 是相同的。</p><ul><li><p><strong>多条 SQL 语句必须以分号（<code>;</code>）分隔</strong>。</p></li><li><p>处理 SQL 语句时，<strong>所有空格都被忽略</strong>。SQL 语句可以写成一行，也可以分写为多行。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 一行 SQL 语句</span><br><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;robot&#x27;</span>, password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;robot&#x27;</span> <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><br><span class="hljs-comment">-- 多行 SQL 语句</span><br><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">SET</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;robot&#x27;</span>, password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;robot&#x27;</span><br><span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>SQL 支持三种注释</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">## 注释<span class="hljs-number">1</span><br><span class="hljs-comment">-- 注释2</span><br><span class="hljs-comment">/* 注释3 */</span><br></code></pre></td></tr></table></figure><h4 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h4><h4 id="数据定义语言（DDL）"><a href="#数据定义语言（DDL）" class="headerlink" title="数据定义语言（DDL）"></a>数据定义语言（DDL）</h4><p>数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言。</p><p>DDL 的主要功能是<strong>定义数据库对象</strong>。</p><p>DDL 的核心指令是 <code>CREATE</code>、<code>ALTER</code>、<code>DROP</code>。</p><h4 id="数据操纵语言（DML）"><a href="#数据操纵语言（DML）" class="headerlink" title="数据操纵语言（DML）"></a>数据操纵语言（DML）</h4><p>数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句。</p><p>DML 的主要功能是 <strong>访问数据</strong>，因此其语法都是以<strong>读写数据库</strong>为主。</p><p>DML 的核心指令是 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>SELECT</code>。这四个指令合称 CRUD(Create, Read, Update, Delete)，即增删改查。</p><h4 id="事务控制语言（TCL）"><a href="#事务控制语言（TCL）" class="headerlink" title="事务控制语言（TCL）"></a>事务控制语言（TCL）</h4><p>事务控制语言 (Transaction Control Language, TCL) 用于<strong>管理数据库中的事务</strong>。这些用于管理由 DML 语句所做的更改。它还允许将语句分组为逻辑事务。</p><p>TCL 的核心指令是 <code>COMMIT</code>、<code>ROLLBACK</code>。</p><h4 id="数据控制语言（DCL）"><a href="#数据控制语言（DCL）" class="headerlink" title="数据控制语言（DCL）"></a>数据控制语言（DCL）</h4><p>数据控制语言 (Data Control Language, DCL) 是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。</p><p>DCL 的核心指令是 <code>GRANT</code>、<code>REVOKE</code>。</p><p>DCL 以<strong>控制用户的访问权限</strong>为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：<code>CONNECT</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>EXECUTE</code>、<code>USAGE</code>、<code>REFERENCES</code>。</p><p>根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。</p><hr><p><em>（以下为 DML 语句用法）</em></p><h2 id="二、增删改查"><a href="#二、增删改查" class="headerlink" title="二、增删改查"></a>二、增删改查</h2><blockquote><p>增删改查，又称为 CRUD，数据库基本操作中的基本操作。</p></blockquote><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><blockquote><ul><li><code>INSERT INTO</code> 语句用于向表中插入新记录。</li></ul></blockquote><p><strong>插入完整的行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>插入行的一部分</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span>(username, password, email)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>插入查询出来的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span>(username)<br><span class="hljs-keyword">SELECT</span> name<br><span class="hljs-keyword">FROM</span> account;<br></code></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><blockquote><ul><li><code>UPDATE</code> 语句用于更新表中的记录。</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">SET</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;robot&#x27;</span>, password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;robot&#x27;</span><br><span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><ul><li><code>DELETE</code> 语句用于删除表中的记录。</li><li><code>TRUNCATE TABLE</code> 可以清空表，也就是删除所有行。</li></ul></blockquote><p><strong>删除表中的指定数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;robot&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>清空表中的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><blockquote><ul><li><code>SELECT</code> 语句用于从数据库中查询数据。</li><li><code>DISTINCT</code> 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。</li><li><code>LIMIT</code> 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。<ul><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li></ul></li></ul></blockquote><p><strong>查询单列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p><strong>查询多列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p><strong>查询所有列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">ELECT <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p><strong>查询不同的值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>vend_id <span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><p><strong>限制查询结果</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 返回前 5 行</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mytable LIMIT <span class="hljs-number">5</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mytable LIMIT <span class="hljs-number">0</span>, <span class="hljs-number">5</span>;<br><span class="hljs-comment">-- 返回第 3 ~ 5 行</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mytable LIMIT <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h2 id="三、子查询"><a href="#三、子查询" class="headerlink" title="三、子查询"></a>三、子查询</h2><blockquote><p>子查询是嵌套在较大查询中的 SQL 查询。子查询也称为<strong>内部查询</strong>或<strong>内部选择</strong>，而包含子查询的语句也称为<strong>外部查询</strong>或<strong>外部选择</strong>。</p></blockquote><ul><li><p>子查询可以嵌套在 <code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code> 或 <code>DELETE</code> 语句内或另一个子查询中。</p></li><li><p>子查询通常会在另一个 <code>SELECT</code> 语句的 <code>WHERE</code> 子句中添加。</p></li><li><p>您可以使用比较运算符，如 <code>&gt;</code>，<code>&lt;</code>，或 <code>=</code>。比较运算符也可以是多行运算符，如 <code>IN</code>，<code>ANY</code> 或 <code>ALL</code>。</p></li><li><p>子查询必须被圆括号 <code>()</code> 括起来。</p></li><li><p>内部查询首先在其父查询之前执行，以便可以将内部查询的结果传递给外部查询。执行过程可以参考下图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa77ca4da1bb77~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="sql-subqueries"></p></li></ul><p><strong>子查询的子查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> cust_id<br>                  <span class="hljs-keyword">FROM</span> orders<br>                  <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                      <span class="hljs-keyword">FROM</span> orderitems<br>                                      <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>));<br></code></pre></td></tr></table></figure><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><ul><li><code>WHERE</code> 子句用于过滤记录，即缩小访问数据的范围。</li><li><code>WHERE</code> 后跟一个返回 <code>true</code> 或 <code>false</code> 的条件。</li><li><code>WHERE</code> 可以与 <code>SELECT</code>，<code>UPDATE</code> 和 <code>DELETE</code> 一起使用。</li><li>可以在 <code>WHERE</code> 子句中使用的操作符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !&#x3D;</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr><tr><td>IN</td><td>指定针对某个列的多个可能值</td></tr></tbody></table><p><strong><code>SELECT</code> 语句中的 <code>WHERE</code> 子句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Kids Place&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong><code>UPDATE</code> 语句中的 <code>WHERE</code> 子句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Customers<br><span class="hljs-keyword">SET</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jack Jones&#x27;</span><br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Kids Place&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong><code>DELETE</code> 语句中的 <code>WHERE</code> 子句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Kids Place&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="IN-和-BETWEEN"><a href="#IN-和-BETWEEN" class="headerlink" title="IN 和 BETWEEN"></a>IN 和 BETWEEN</h3><ul><li><code>IN</code> 操作符在 <code>WHERE</code> 子句中使用，作用是在指定的几个特定值中任选一个值。</li><li><code>BETWEEN</code> 操作符在 <code>WHERE</code> 子句中使用，作用是选取介于某个范围内的值。</li></ul><p><strong>IN 示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;DLL01&#x27;</span>, <span class="hljs-string">&#x27;BRS01&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>BETWEEN 示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> prod_price <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h3 id="AND、OR、NOT"><a href="#AND、OR、NOT" class="headerlink" title="AND、OR、NOT"></a>AND、OR、NOT</h3><ul><li><code>AND</code>、<code>OR</code>、<code>NOT</code> 是用于对过滤条件的逻辑处理指令。</li><li><code>AND</code> 优先级高于 <code>OR</code>，为了明确处理顺序，可以使用 <code>()</code>。</li><li><code>AND</code> 操作符表示左右条件都要满足。</li><li><code>OR</code> 操作符表示左右条件满足任意一个即可。</li><li><code>NOT</code> 操作符用于否定一个条件。</li></ul><p><strong>AND 示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span> <span class="hljs-keyword">AND</span> prod_price <span class="hljs-operator">&lt;=</span> <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p><strong>OR 示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span> <span class="hljs-keyword">OR</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BRS01&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>NOT 示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> prod_price <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">3</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><ul><li><code>LIKE</code> 操作符在 <code>WHERE</code> 子句中使用，作用是确定字符串是否匹配模式。</li><li>只有字段是文本值时才使用 <code>LIKE</code>。</li><li><code>LIKE</code> 支持两个通配符匹配选项：<code>%</code> 和 <code>_</code>。</li><li>不要滥用通配符，通配符位于开头处匹配会非常慢。</li><li><code>%</code> 表示任何字符出现任意次数。</li><li><code>_</code> 表示任何字符出现一次。</li></ul><p><strong>% 示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%bean bag%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>_ 示例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;__ inch teddy bear&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="四、连接和组合"><a href="#四、连接和组合" class="headerlink" title="四、连接和组合"></a>四、连接和组合</h2><h3 id="连接（JOIN）"><a href="#连接（JOIN）" class="headerlink" title="连接（JOIN）"></a>连接（JOIN）</h3><blockquote><ul><li>如果一个 <code>JOIN</code> 至少有一个公共字段并且它们之间存在关系，则该 <code>JOIN</code> 可以在两个或多个表上工作。</li><li>连接用于连接多个表，使用 <code>JOIN</code> 关键字，并且条件语句使用 <code>ON</code> 而不是 <code>WHERE</code>。</li><li><code>JOIN</code> 保持基表（结构和数据）不变。</li><li><code>JOIN</code> 有两种连接类型：内连接和外连接。</li><li>内连接又称等值连接，使用 INNER <code>JOIN</code> 关键字。在没有条件语句的情况下返回笛卡尔积。<ul><li>自连接可以看成内连接的一种，只是连接的表是自身而已。</li></ul></li><li>自然连接是把同名列通过 &#x3D; 测试连接起来的，同名列可以有多个。</li><li>内连接 vs 自然连接<ul><li>内连接提供连接的列，而自然连接自动连接所有同名列。</li></ul></li><li>外连接返回一个表中的所有行，并且仅返回来自次表中满足连接条件的那些行，即两个表中的列是相等的。外连接分为左外连接、右外连接、全外连接（Mysql 不支持）。<ul><li>左外连接就是保留左表没有关联的行。</li><li>右外连接就是保留右表没有关联的行。</li></ul></li><li>连接 vs 子查询<ul><li>连接可以替换子查询，并且比子查询的效率一般会更快。</li></ul></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/15/16fa77ca4ecc58cf~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="sql-join"></p></blockquote><h4 id="内连接（INNER-JOIN）"><a href="#内连接（INNER-JOIN）" class="headerlink" title="内连接（INNER JOIN）"></a>内连接（INNER JOIN）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> vendors <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> products<br><span class="hljs-keyword">ON</span> vendors.vend_id <span class="hljs-operator">=</span> products.vend_id;<br></code></pre></td></tr></table></figure><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact<br><span class="hljs-keyword">FROM</span> customers c1, customers c2<br><span class="hljs-keyword">WHERE</span> c1.cust_name <span class="hljs-operator">=</span> c2.cust_name<br><span class="hljs-keyword">AND</span> c2.cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jim Jones&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="自然连接（NATURAL-JOIN）"><a href="#自然连接（NATURAL-JOIN）" class="headerlink" title="自然连接（NATURAL JOIN）"></a>自然连接（NATURAL JOIN）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">NATURAL</span> <span class="hljs-keyword">JOIN</span> Customers;<br></code></pre></td></tr></table></figure><h4 id="左连接（LEFT-JOIN）"><a href="#左连接（LEFT-JOIN）" class="headerlink" title="左连接（LEFT JOIN）"></a>左连接（LEFT JOIN）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id, orders.order_num<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> orders<br><span class="hljs-keyword">ON</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id;<br></code></pre></td></tr></table></figure><h4 id="右连接（RIGHT-JOIN）"><a href="#右连接（RIGHT-JOIN）" class="headerlink" title="右连接（RIGHT JOIN）"></a>右连接（RIGHT JOIN）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id, orders.order_num<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> orders<br><span class="hljs-keyword">ON</span> customers.cust_id <span class="hljs-operator">=</span> orders.cust_id;<br></code></pre></td></tr></table></figure><h3 id="组合（UNION）"><a href="#组合（UNION）" class="headerlink" title="组合（UNION）"></a>组合（UNION）</h3><ul><li><code>UNION</code> 运算符将两个或更多查询的结果组合起来，并生成一个结果集，其中包含来自 <code>UNION</code> 中参与查询的提取行。</li><li><code>UNION</code> 基本规则<ul><li>所有查询的列数和列顺序必须相同。</li><li>每个查询中涉及表的列的数据类型必须相同或兼容。</li><li>通常返回的列名取自第一个查询。</li></ul></li><li>默认会去除相同行，如果需要保留相同行，使用 <code>UNION ALL</code>。</li><li>只能包含一个 <code>ORDER BY</code> 子句，并且必须位于语句的最后。</li><li>应用场景<ul><li>在一个查询中从不同的表返回结构数据。</li><li>对一个表执行多个查询，按一个查询返回数据。</li></ul></li></ul><p><strong>组合查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>, <span class="hljs-string">&#x27;IN&#x27;</span>, <span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fun4All&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="JOIN-vs-UNION"><a href="#JOIN-vs-UNION" class="headerlink" title="JOIN vs UNION"></a>JOIN vs UNION</h3><ul><li>JOIN vs UNION<ul><li><code>JOIN</code> 中连接表的列可能不同，但在 <code>UNION</code> 中，所有查询的列数和列顺序必须相同。</li><li><code>UNION</code> 将查询之后的行放在一起（垂直放置），但 <code>JOIN</code> 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。</li></ul></li></ul><h2 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h2><blockquote><p>🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。</p></blockquote><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>LEFT()</code>、<code>RIGHT()</code></td><td>左边或者右边的字符</td></tr><tr><td><code>LOWER()</code>、<code>UPPER()</code></td><td>转换为小写或者大写</td></tr><tr><td><code>LTRIM()</code>、<code>RTIM()</code></td><td>去除左边或者右边的空格</td></tr><tr><td><code>LENGTH()</code></td><td>长度</td></tr><tr><td><code>SOUNDEX()</code></td><td>转换为语音值</td></tr></tbody></table><p>其中， <strong>SOUNDEX()</strong> 可以将一个字符串转换为描述其语音表示的字母数字模式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> mytable<br><span class="hljs-keyword">WHERE</span> SOUNDEX(col1) <span class="hljs-operator">=</span> SOUNDEX(<span class="hljs-string">&#x27;apple&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h3><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code></li></ul><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td><code>AddDate()</code></td><td>增加一个日期（天、周等）</td></tr><tr><td><code>AddTime()</code></td><td>增加一个时间（时、分等）</td></tr><tr><td><code>CurDate()</code></td><td>返回当前日期</td></tr><tr><td><code>CurTime()</code></td><td>返回当前时间</td></tr><tr><td><code>Date()</code></td><td>返回日期时间的日期部分</td></tr><tr><td><code>DateDiff()</code></td><td>计算两个日期之差</td></tr><tr><td><code>Date_Add()</code></td><td>高度灵活的日期运算函数</td></tr><tr><td><code>Date_Format()</code></td><td>返回一个格式化的日期或时间串</td></tr><tr><td><code>Day()</code></td><td>返回一个日期的天数部分</td></tr><tr><td><code>DayOfWeek()</code></td><td>对于一个日期，返回对应的星期几</td></tr><tr><td><code>Hour()</code></td><td>返回一个时间的小时部分</td></tr><tr><td><code>Minute()</code></td><td>返回一个时间的分钟部分</td></tr><tr><td><code>Month()</code></td><td>返回一个日期的月份部分</td></tr><tr><td><code>Now()</code></td><td>返回当前日期和时间</td></tr><tr><td><code>Second()</code></td><td>返回一个时间的秒部分</td></tr><tr><td><code>Time()</code></td><td>返回一个日期时间的时间部分</td></tr><tr><td><code>Year()</code></td><td>返回一个日期的年份部分</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> NOW();<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs auto">2018-4-14 20:25:11<br></code></pre></td></tr></table></figure><h3 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SIN()</td><td>正弦</td></tr><tr><td>COS()</td><td>余弦</td></tr><tr><td>TAN()</td><td>正切</td></tr><tr><td>ABS()</td><td>绝对值</td></tr><tr><td>SQRT()</td><td>平方根</td></tr><tr><td>MOD()</td><td>余数</td></tr><tr><td>EXP()</td><td>指数</td></tr><tr><td>PI()</td><td>圆周率</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td><code>AVG()</code></td><td>返回某列的平均值</td></tr><tr><td><code>COUNT()</code></td><td>返回某列的行数</td></tr><tr><td><code>MAX()</code></td><td>返回某列的最大值</td></tr><tr><td><code>MIN()</code></td><td>返回某列的最小值</td></tr><tr><td><code>SUM()</code></td><td>返回某列值之和</td></tr></tbody></table><p><code>AVG()</code> 会忽略 NULL 行。</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(<span class="hljs-keyword">DISTINCT</span> col1) <span class="hljs-keyword">AS</span> avg_col<br><span class="hljs-keyword">FROM</span> mytable<br></code></pre></td></tr></table></figure><h2 id="六、排序和分组"><a href="#六、排序和分组" class="headerlink" title="六、排序和分组"></a>六、排序和分组</h2><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><ul><li><code>ORDER BY</code> 用于对结果集进行排序。<ul><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li></ul></li><li>可以按多个列进行排序，并且为每个列指定不同的排序方式</li></ul><p><strong>指定多个列的排序方向</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price <span class="hljs-keyword">DESC</span>, prod_name <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><ul><li><code>GROUP BY</code> 子句将记录分组到汇总行中。</li><li><code>GROUP BY</code> 为每个组返回一个记录。</li><li><code>GROUP BY</code> 通常还涉及聚合：COUNT，MAX，SUM，AVG 等。</li><li><code>GROUP BY</code> 可以按一列或多列进行分组。</li><li><code>GROUP BY</code> 按分组字段进行排序后，<code>ORDER BY</code> 可以以汇总字段来进行排序。</li></ul><p><strong>分组</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, <span class="hljs-built_in">COUNT</span>(cust_address) <span class="hljs-keyword">AS</span> addr_num<br><span class="hljs-keyword">FROM</span> Customers <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cust_name;<br></code></pre></td></tr></table></figure><p><strong>分组后排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, <span class="hljs-built_in">COUNT</span>(cust_address) <span class="hljs-keyword">AS</span> addr_num<br><span class="hljs-keyword">FROM</span> Customers <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cust_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><ul><li><code>HAVING</code> 用于对汇总的 <code>GROUP BY</code> 结果进行过滤。</li><li><code>HAVING</code> 要求存在一个 <code>GROUP BY</code> 子句。</li><li><code>WHERE</code> 和 <code>HAVING</code> 可以在相同的查询中。</li><li><code>HAVING</code> vs <code>WHERE</code><ul><li><code>WHERE</code> 和 <code>HAVING</code> 都是用于过滤。</li><li><code>HAVING</code> 适用于汇总的组记录；而 WHERE 适用于单个记录。</li></ul></li></ul><p><strong>使用 WHERE 和 HAVING 过滤数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_email <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cust_name<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><hr><p><em>（以下为 DDL 语句用法）</em></p><h2 id="七、数据定义"><a href="#七、数据定义" class="headerlink" title="七、数据定义"></a>七、数据定义</h2><blockquote><p>DDL 的主要功能是定义数据库对象（如：数据库、数据表、视图、索引等）。</p></blockquote><h3 id="数据库（DATABASE）"><a href="#数据库（DATABASE）" class="headerlink" title="数据库（DATABASE）"></a>数据库（DATABASE）</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE test;<br></code></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE test;<br></code></pre></td></tr></table></figure><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE test;<br></code></pre></td></tr></table></figure><h3 id="数据表（TABLE）"><a href="#数据表（TABLE）" class="headerlink" title="数据表（TABLE）"></a>数据表（TABLE）</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p><strong>普通创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> (<br>  id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;Id&#x27;</span>,<br>  username <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;default&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>  password <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;default&#x27;</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  email <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;default&#x27;</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span><br>) COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>根据已有的表创建新表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> vip_user <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h4 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h4><p><strong>添加列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">ADD</span> age <span class="hljs-type">int</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p><strong>删除列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> age;<br></code></pre></td></tr></table></figure><p><strong>修改列</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>MODIFY <span class="hljs-keyword">COLUMN</span> age tinyint;<br></code></pre></td></tr></table></figure><p><strong>添加主键</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (id);<br></code></pre></td></tr></table></figure><p><strong>删除主键</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br></code></pre></td></tr></table></figure><h3 id="视图（VIEW）"><a href="#视图（VIEW）" class="headerlink" title="视图（VIEW）"></a>视图（VIEW）</h3><blockquote><ul><li>定义<ul><li>视图是基于 SQL 语句的结果集的可视化的表。</li><li>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。</li></ul></li><li>作用<ul><li>简化复杂的 SQL 操作，比如复杂的联结；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul></li></ul></blockquote><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> top_10_user_view <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> id, username<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> top_10_user_view;<br></code></pre></td></tr></table></figure><h3 id="索引（INDEX）"><a href="#索引（INDEX）" class="headerlink" title="索引（INDEX）"></a>索引（INDEX）</h3><blockquote><ul><li>作用<ul><li>通过索引可以更加快速高效地查询数据。</li><li>用户无法看到索引，它们只能被用来加速查询。</li></ul></li><li>注意<ul><li>更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</li></ul></li><li>唯一索引<ul><li>唯一索引表明此索引的每一个索引值只对应唯一的数据记录。</li></ul></li></ul></blockquote><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX user_index<br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">user</span> (id);<br></code></pre></td></tr></table></figure><h4 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX user_index<br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">user</span> (id);<br></code></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">DROP</span> INDEX user_index;<br></code></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><blockquote><p>SQL 约束用于规定表中的数据规则。</p></blockquote><ul><li>如果存在违反约束的数据行为，行为会被约束终止。</li><li>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。</li><li>约束类型<ul><li><code>NOT NULL</code> - 指示某列不能存储 NULL 值。</li><li><code>UNIQUE</code> - 保证某列的每行必须有唯一的值。</li><li><code>PRIMARY KEY</code> - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li><code>FOREIGN KEY</code> - 保证一个表中的数据匹配另一个���中的值的参照完整性。</li><li><code>CHECK</code> - 保证列中的值符合指定的条件。</li><li><code>DEFAULT</code> - 规定没有给列赋值时的默认值。</li></ul></li></ul><p>创建表时使用约束条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Users (<br>  Id <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;自增Id&#x27;</span>,<br>  Username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;default&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>  Password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;default&#x27;</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  Email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;default&#x27;</span> COMMENT <span class="hljs-string">&#x27;邮箱地址&#x27;</span>,<br>  Enabled TINYINT(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;是否有效&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (Id)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><p><em>（以下为 TCL 语句用法）</em></p><h2 id="八、事务处理"><a href="#八、事务处理" class="headerlink" title="八、事务处理"></a>八、事务处理</h2><blockquote><ul><li>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</li><li><strong>MySQL 默认是隐式提交</strong>，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 <code>START TRANSACTION</code> 语句时，会关闭隐式提交；当 <code>COMMIT</code> 或 <code>ROLLBACK</code> 语句执行后，事务会自动关闭，重新恢复隐式提交。</li><li>通过 <code>set autocommit=0</code> 可以取消自动提交，直到 <code>set autocommit=1</code> 才会提交；autocommit 标记是针对每个连接而不是针对服务器的。</li><li>指令<ul><li><code>START TRANSACTION</code> - 指令用于标记事务的起始点。</li><li><code>SAVEPOINT</code> - 指令用于创建保留点。</li><li><code>ROLLBACK TO</code> - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 <code>START TRANSACTION</code> 语句处。</li><li><code>COMMIT</code> - 提交事务。</li></ul></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开始事务</span><br><span class="hljs-keyword">START</span> TRANSACTION;<br><br><span class="hljs-comment">-- 插入操作 A</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;root1&#x27;</span>, <span class="hljs-string">&#x27;root1&#x27;</span>, <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span>);<br><br><span class="hljs-comment">-- 创建保留点 updateA</span><br><span class="hljs-keyword">SAVEPOINT</span> updateA;<br><br><span class="hljs-comment">-- 插入操作 B</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;root2&#x27;</span>, <span class="hljs-string">&#x27;root2&#x27;</span>, <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span>);<br><br><span class="hljs-comment">-- 回滚到保留点 updateA</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> updateA;<br><br><span class="hljs-comment">-- 提交事务，只有操作 A 生效</span><br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><hr><p><em>（以下为 DCL 语句用法）</em></p><h2 id="九、权限控制"><a href="#九、权限控制" class="headerlink" title="九、权限控制"></a>九、权限控制</h2><blockquote><ul><li><p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul></li><li><p>新创建的账户没有任何权限。</p></li><li><p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p></li><li><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE mysql;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> myuser IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;mypassword&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="修改账户名"><a href="#修改账户名" class="headerlink" title="修改账户名"></a>修改账户名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;newuser&#x27;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;myuser&#x27;</span>;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h3 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> myuser;<br></code></pre></td></tr></table></figure><h3 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> myuser;<br></code></pre></td></tr></table></figure><h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> myuser;<br></code></pre></td></tr></table></figure><h3 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> myuser;<br></code></pre></td></tr></table></figure><h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-keyword">FOR</span> myuser <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;mypass&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="十、存储过程"><a href="#十、存储过程" class="headerlink" title="十、存储过程"></a>十、存储过程</h2><blockquote><ul><li>存储过程可以看成是对一系列 SQL 操作的批处理；</li><li>使用存储过程的好处<ul><li>代码封装，保证了一定的安全性；</li><li>代码复用；</li><li>由于是预先编译，因此具有很高的性能。</li></ul></li><li>创建存储过程<ul><li>命令行中创建存储过程需要自定义分隔符，因为命令行是以 <code>;</code> 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</li><li>包含 in、out 和 inout 三种参数。</li><li>给变量赋值都需要用 select into 语句。</li><li>每次只能给一个变量赋值，不支持集合的操作。</li></ul></li></ul></blockquote><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> IF <span class="hljs-keyword">EXISTS</span> `proc_adder`;<br>DELIMITER ;;<br><span class="hljs-keyword">CREATE</span> DEFINER<span class="hljs-operator">=</span>`root`@`localhost` <span class="hljs-keyword">PROCEDURE</span> `proc_adder`(<span class="hljs-keyword">IN</span> a <span class="hljs-type">int</span>, <span class="hljs-keyword">IN</span> b <span class="hljs-type">int</span>, <span class="hljs-keyword">OUT</span> sum <span class="hljs-type">int</span>)<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> c <span class="hljs-type">int</span>;<br>    if a <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> a <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> if;<br><br>    if b <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> b <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span> if;<br><br>    <span class="hljs-keyword">set</span> sum  <span class="hljs-operator">=</span> a <span class="hljs-operator">+</span> b;<br><span class="hljs-keyword">END</span><br>;;<br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-variable">@b</span><span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-keyword">call</span> proc_adder(<span class="hljs-number">2</span>,<span class="hljs-variable">@b</span>,<span class="hljs-variable">@s</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@s</span> <span class="hljs-keyword">as</span> sum;<br></code></pre></td></tr></table></figure><h2 id="十一、游标"><a href="#十一、游标" class="headerlink" title="十一、游标"></a>十一、游标</h2><blockquote><ul><li>游标（cursor）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集。</li><li>在存储过程中使用游标可以对一个结果集进行移动遍历。</li><li>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</li><li>使用游标的四个步骤：<ul><li>声明游标，这个过程没有实际检索出数据；</li><li>打开游标；</li><li>取出数据；</li><li>关闭游标；</li></ul></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER $<br><span class="hljs-keyword">CREATE</span>  <span class="hljs-keyword">PROCEDURE</span> getTotal()<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> total <span class="hljs-type">INT</span>;<br>    <span class="hljs-comment">-- 创建接收游标数据的变量</span><br>    <span class="hljs-keyword">DECLARE</span> sid <span class="hljs-type">INT</span>;<br>    <span class="hljs-keyword">DECLARE</span> sname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">-- 创建总数变量</span><br>    <span class="hljs-keyword">DECLARE</span> sage <span class="hljs-type">INT</span>;<br>    <span class="hljs-comment">-- 创建结束标志变量</span><br>    <span class="hljs-keyword">DECLARE</span> done <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">-- 创建游标</span><br>    <span class="hljs-keyword">DECLARE</span> cur <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> id,name,age <span class="hljs-keyword">from</span> cursor_table <span class="hljs-keyword">where</span> age<span class="hljs-operator">&gt;</span><span class="hljs-number">30</span>;<br>    <span class="hljs-comment">-- 指定游标循环结束时的返回值</span><br>    <span class="hljs-keyword">DECLARE</span> CONTINUE HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">NOT</span> FOUND <span class="hljs-keyword">SET</span> done <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">SET</span> total <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">OPEN</span> cur;<br>    <span class="hljs-keyword">FETCH</span> cur <span class="hljs-keyword">INTO</span> sid, sname, sage;<br>    WHILE(<span class="hljs-keyword">NOT</span> done)<br>    DO<br>        <span class="hljs-keyword">SET</span> total <span class="hljs-operator">=</span> total <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">FETCH</span> cur <span class="hljs-keyword">INTO</span> sid, sname, sage;<br>    <span class="hljs-keyword">END</span> WHILE;<br><br>    <span class="hljs-keyword">CLOSE</span> cur;<br>    <span class="hljs-keyword">SELECT</span> total;<br><span class="hljs-keyword">END</span> $<br>DELIMITER ;<br><br><span class="hljs-comment">-- 调用存储过程</span><br><span class="hljs-keyword">call</span> getTotal();<br></code></pre></td></tr></table></figure><h2 id="十二、触发器"><a href="#十二、触发器" class="headerlink" title="十二、触发器"></a>十二、触发器</h2><blockquote><p>触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。</p></blockquote><p>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。</p><p>MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程。</p><p><strong><code>BEGIN</code> 和 <code>END</code></strong></p><p>当触发器的触发条件满足时，将会执行 <code>BEGIN</code> 和 <code>END</code> 之间的触发器执行动作。</p><blockquote><p>🔔 注意：在 MySQL 中，分号 <code>;</code> 是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。</p><p>这时就会用到 <code>DELIMITER</code> 命令（DELIMITER 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：<code>DELIMITER new_delemiter</code>。<code>new_delemiter</code> 可以设为 1 个或多个长度的符号，默认的是分号 <code>;</code>，我们可以把它修改为其他符号，如 <code>$</code> - <code>DELIMITER $</code> 。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 <code>$</code>，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。</p></blockquote><p><strong><code>NEW</code> 和 <code>OLD</code></strong></p><ul><li>MySQL 中定义了 <code>NEW</code> 和 <code>OLD</code> 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。</li><li>在 <code>INSERT</code> 型触发器中，<code>NEW</code> 用来表示将要（<code>BEFORE</code>）或已经（<code>AFTER</code>）插入的新数据；</li><li>在 <code>UPDATE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被修改的原数据，<code>NEW</code> 用来表示将要或已经修改为的新数据；</li><li>在 <code>DELETE</code> 型触发器中，<code>OLD</code> 用来表示将要或已经被删除的原数据；</li><li>使用方法： <code>NEW.columnName</code> （columnName 为相应数据表某一列名）</li></ul><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><blockquote><p>提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。</p></blockquote><p><code>CREATE TRIGGER</code> 指令用于创建触发器。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> trigger_name<br>trigger_time<br>trigger_event<br><span class="hljs-keyword">ON</span> table_name<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>  trigger_statements<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>trigger_name：触发器名</li><li>trigger_time: 触发器的触发时机。取值为 <code>BEFORE</code> 或 <code>AFTER</code>。</li><li>trigger_event: 触发器的监听事件。取值为 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>。</li><li>table_name: 触发器的监听目标。指定在哪张表上建立触发器。</li><li>FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。</li><li>trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号 <code>;</code> 来结尾。</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> `trigger_insert_user`<br>AFTER <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> `<span class="hljs-keyword">user</span>`<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_history`(user_id, operate_type, operate_time)<br>    <span class="hljs-keyword">VALUES</span> (NEW.id, <span class="hljs-string">&#x27;add a user&#x27;</span>,  now());<br><span class="hljs-keyword">END</span> $<br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TRIGGERS;<br></code></pre></td></tr></table></figure><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> IF <span class="hljs-keyword">EXISTS</span> trigger_insert_user;<br></code></pre></td></tr></table></figure><p>（完）</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>BenForta. SQL 必知必会 [M]. 人民邮电出版社, 2013.</li><li><a href="https://draveness.me/mysql-transaction" title="https://draveness.me/mysql-transaction">『浅入深出』MySQL 中事务的实现</a></li><li><a href="https://www.cnblogs.com/CraryPrimitiveMan/p/4206942.html" title="https://www.cnblogs.com/CraryPrimitiveMan/p/4206942.html">MySQL 的学习–触发器</a></li><li><a href="https://zh.wikipedia.org/wiki/SQL" title="https://zh.wikipedia.org/wiki/SQL">维基百科词条 - SQL</a></li><li><a href="https://www.sitesbay.com/sql/index" title="https://www.sitesbay.com/sql/index">www.sitesbay.com/sql/index</a></li><li><a href="https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php" title="https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php">SQL Subqueries</a></li><li><a href="https://stackoverflow.com/questions/6294778/mysql-quick-breakdown-of-the-types-of-joins" title="https://stackoverflow.com/questions/6294778/mysql-quick-breakdown-of-the-types-of-joins">Quick breakdown of the types of joins</a></li><li><a href="https://www.w3resource.com/sql/sql-union.php" title="https://www.w3resource.com/sql/sql-union.php">SQL UNION</a></li><li><a href="https://www.w3resource.com/sql/database-security/create-users.php" title="https://www.w3resource.com/sql/database-security/create-users.php">SQL database security</a></li><li><a href="https://www.cnblogs.com/chenpi/p/5136483.html" title="https://www.cnblogs.com/chenpi/p/5136483.html">Mysql 中的存储过程</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
